/* The following code was generated by JFlex 1.7.0 */

package com.hluther.lexer;
import com.hluther.gui.Konquest;
import com.hluther.parser.MapConfigFileSym;
import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>/home/helmuth/Documentos/Programas Desarrollados/NetBeansProjects/Java/Organizacion de Lenguajes y Compiladores 1/Konquest/src/main/java/com/hluther/files/MapConfigFile.flex</tt>
 */
public class MapConfigFileLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\5\1\4\1\71\1\5\1\3\22\0\1\5\1\0\1\65"+
    "\1\0\1\66\7\0\1\63\1\67\1\70\1\0\1\64\1\2\1\2"+
    "\1\2\1\2\1\2\1\2\1\2\1\2\1\2\1\62\6\0\1\7"+
    "\1\1\1\30\1\23\1\12\1\27\1\22\1\25\1\26\1\21\1\1"+
    "\1\16\1\6\1\11\1\24\1\10\1\1\1\15\1\17\1\14\1\13"+
    "\5\1\1\60\1\0\1\61\1\0\1\20\1\0\1\36\1\55\1\46"+
    "\1\42\1\34\1\35\1\52\1\1\1\41\1\54\1\1\1\37\1\43"+
    "\1\47\1\45\1\51\1\1\1\32\1\40\1\31\1\33\1\53\3\1"+
    "\1\50\1\56\1\0\1\57\7\0\1\71\153\0\1\44\u1f36\0\1\71"+
    "\1\71\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\17\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\2\1\1\16\0\1\12\10\0"+
    "\1\13\31\0\1\13\2\0\1\14\1\15\1\16\6\0"+
    "\1\17\1\0\1\20\15\0\1\13\2\0\1\21\5\0"+
    "\1\22\1\0\1\23\1\24\6\0\1\25\4\0\1\13"+
    "\5\0\1\26\1\27\1\0\1\30\4\0\1\31\3\0"+
    "\1\13\4\0\1\32\10\0\1\13\1\0\1\33\3\0"+
    "\1\34\3\0\1\35\1\0\1\36\1\0\1\13\2\0"+
    "\1\37\1\40\1\0\1\41\12\0\1\42\13\0\1\43"+
    "\1\44\25\0\1\45\1\46\1\47\1\0\1\50";

  private static int [] zzUnpackAction() {
    int [] result = new int[232];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\72\0\350\0\u0122\0\u015c"+
    "\0\u0196\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\u02f2\0\u032c"+
    "\0\u0366\0\u03a0\0\u03da\0\u0414\0\72\0\72\0\72\0\72"+
    "\0\72\0\72\0\u044e\0\u0488\0\u04c2\0\u04fc\0\u0536\0\u0570"+
    "\0\u05aa\0\u05e4\0\u061e\0\u0658\0\u0692\0\u06cc\0\u0706\0\u0740"+
    "\0\u077a\0\u07b4\0\72\0\u07ee\0\u0828\0\u0862\0\u089c\0\u08d6"+
    "\0\u0910\0\u094a\0\u0984\0\u09be\0\u09f8\0\u0a32\0\u0a6c\0\u0aa6"+
    "\0\u0ae0\0\u0b1a\0\u0b54\0\u0b8e\0\u0bc8\0\u0c02\0\u0c3c\0\u0c76"+
    "\0\u0cb0\0\u0cea\0\u0d24\0\u0d5e\0\u0d98\0\u0dd2\0\u0e0c\0\u0e46"+
    "\0\u0e80\0\u0eba\0\u0ef4\0\u0f2e\0\u0f68\0\u0fa2\0\u0fdc\0\u1016"+
    "\0\72\0\72\0\72\0\u1050\0\u108a\0\u10c4\0\u10fe\0\u1138"+
    "\0\u1172\0\72\0\u11ac\0\72\0\u11e6\0\u1220\0\u125a\0\u1294"+
    "\0\u12ce\0\u1308\0\u1342\0\u137c\0\u13b6\0\u13f0\0\u142a\0\u1464"+
    "\0\u149e\0\u14d8\0\u1512\0\u154c\0\72\0\u1586\0\u15c0\0\u15fa"+
    "\0\u1634\0\u166e\0\72\0\u16a8\0\72\0\72\0\u16e2\0\u171c"+
    "\0\u1756\0\u1790\0\u17ca\0\u1804\0\72\0\u183e\0\u1878\0\u18b2"+
    "\0\u18ec\0\u1926\0\u1960\0\u199a\0\u19d4\0\u1a0e\0\u1a48\0\72"+
    "\0\72\0\u1a82\0\72\0\u1abc\0\u1af6\0\u1b30\0\u1b6a\0\72"+
    "\0\u1ba4\0\u1bde\0\u1c18\0\u1c52\0\u1c8c\0\u1cc6\0\u1d00\0\u1d3a"+
    "\0\72\0\u1d74\0\u1dae\0\u1de8\0\u1e22\0\u1e5c\0\u1e96\0\u1ed0"+
    "\0\u1f0a\0\u1f44\0\u1f7e\0\u1fb8\0\u1ff2\0\u202c\0\u2066\0\72"+
    "\0\u20a0\0\u20da\0\u2114\0\72\0\u214e\0\u2188\0\u21c2\0\72"+
    "\0\u21fc\0\u2236\0\72\0\72\0\u2270\0\72\0\u22aa\0\u22e4"+
    "\0\u231e\0\u2358\0\u2392\0\u23cc\0\u2406\0\u2440\0\u247a\0\u24b4"+
    "\0\72\0\u24ee\0\u2528\0\u2562\0\u259c\0\u25d6\0\u2610\0\u264a"+
    "\0\u2684\0\u26be\0\u26f8\0\u2732\0\72\0\72\0\u276c\0\u27a6"+
    "\0\u27e0\0\u281a\0\u2854\0\u288e\0\u28c8\0\u2902\0\u293c\0\u2976"+
    "\0\u29b0\0\u29ea\0\u2a24\0\u2a5e\0\u2a98\0\u2ad2\0\u2b0c\0\u2b46"+
    "\0\u2b80\0\u2bba\0\u2bf4\0\72\0\72\0\72\0\u2c2e\0\72";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[232];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\1\3\1\4\2\5\1\6\1\2\1\7\1\10"+
    "\7\2\1\11\1\2\1\12\1\2\1\13\1\2\1\14"+
    "\1\2\1\15\3\2\1\16\1\17\2\2\1\20\1\2"+
    "\1\21\2\2\1\22\1\23\1\2\1\24\4\2\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\3\2"+
    "\75\0\1\3\61\0\1\3\11\0\1\5\74\0\1\35"+
    "\100\0\1\36\65\0\1\37\72\0\1\40\104\0\1\41"+
    "\56\0\1\42\65\0\1\43\114\0\1\44\3\0\1\45"+
    "\2\0\1\46\66\0\1\47\2\0\1\50\67\0\1\51"+
    "\6\0\1\52\65\0\1\53\65\0\1\54\6\0\1\55"+
    "\71\0\1\56\62\0\1\57\6\0\1\60\56\0\1\61"+
    "\4\0\1\62\5\0\1\63\114\0\1\64\2\0\1\65"+
    "\4\0\12\65\1\66\23\65\1\0\11\65\10\0\1\66"+
    "\13\0\1\67\70\0\1\70\75\0\1\71\100\0\1\72"+
    "\76\0\1\73\50\0\1\74\113\0\1\75\74\0\1\76"+
    "\101\0\1\77\77\0\1\100\57\0\1\101\71\0\1\102"+
    "\7\0\1\103\31\0\1\104\115\0\1\105\107\0\1\106"+
    "\60\0\1\107\70\0\1\110\105\0\1\111\61\0\1\112"+
    "\73\0\1\113\62\0\1\114\65\0\1\115\41\0\1\116"+
    "\61\0\1\116\6\0\1\117\1\120\3\0\12\117\1\66"+
    "\23\117\1\0\11\117\6\0\1\120\1\121\2\66\3\0"+
    "\2\66\3\0\36\66\1\0\11\66\6\0\1\66\1\122"+
    "\2\66\11\0\1\123\73\0\1\124\74\0\1\125\64\0"+
    "\1\126\110\0\1\127\52\0\1\130\110\0\1\131\77\0"+
    "\1\132\73\0\1\133\100\0\1\134\64\0\1\135\67\0"+
    "\1\136\71\0\1\137\103\0\1\140\64\0\1\141\64\0"+
    "\1\142\64\0\1\143\73\0\1\144\72\0\1\145\112\0"+
    "\1\146\56\0\1\147\76\0\1\150\70\0\1\151\25\0"+
    "\1\152\61\0\1\152\6\0\1\153\1\154\3\0\12\153"+
    "\1\66\23\153\1\0\11\153\6\0\1\154\1\121\2\66"+
    "\3\0\2\154\3\0\12\154\1\66\23\154\1\0\11\154"+
    "\6\0\1\154\1\155\2\66\14\0\1\156\74\0\1\157"+
    "\77\0\1\160\76\0\1\161\52\0\1\162\76\0\1\163"+
    "\117\0\1\164\61\0\1\165\75\0\1\166\70\0\1\167"+
    "\70\0\1\170\66\0\1\171\66\0\1\172\73\0\1\173"+
    "\102\0\1\174\66\0\1\175\63\0\1\176\72\0\1\177"+
    "\72\0\1\200\71\0\1\201\37\0\1\202\61\0\1\202"+
    "\6\0\2\203\3\0\12\203\1\66\23\203\1\0\11\203"+
    "\6\0\1\203\1\121\2\66\3\0\2\203\3\0\12\203"+
    "\1\66\23\203\1\0\11\203\6\0\1\203\1\155\2\66"+
    "\16\0\1\204\64\0\1\205\106\0\1\206\73\0\1\207"+
    "\67\0\1\210\112\0\1\211\65\0\1\212\62\0\1\213"+
    "\76\0\1\214\73\0\1\215\66\0\1\216\102\0\1\217"+
    "\56\0\1\220\103\0\1\221\54\0\1\222\107\0\1\223"+
    "\24\0\1\224\61\0\1\224\6\0\2\225\3\0\12\225"+
    "\1\66\23\225\1\0\11\225\6\0\1\225\1\155\2\66"+
    "\11\0\1\226\100\0\1\227\70\0\1\230\72\0\1\231"+
    "\123\0\1\232\57\0\1\233\67\0\1\234\67\0\1\235"+
    "\75\0\1\236\101\0\1\237\61\0\1\240\64\0\1\241"+
    "\42\0\1\242\61\0\1\242\6\0\2\243\3\0\12\243"+
    "\1\66\23\243\1\0\11\243\6\0\1\243\1\155\2\66"+
    "\21\0\1\244\64\0\1\245\71\0\1\246\115\0\1\247"+
    "\65\0\1\250\111\0\1\251\30\0\1\252\1\253\117\0"+
    "\1\254\72\0\1\255\70\0\1\256\67\0\1\257\35\0"+
    "\1\260\61\0\1\260\6\0\2\261\3\0\12\261\1\66"+
    "\23\261\1\0\11\261\6\0\1\261\1\155\2\66\22\0"+
    "\1\262\70\0\1\263\71\0\1\264\120\0\1\265\70\0"+
    "\1\266\62\0\1\267\73\0\1\270\76\0\1\271\35\0"+
    "\1\272\134\0\1\273\16\0\2\274\3\0\12\274\1\66"+
    "\23\274\1\0\11\274\6\0\1\274\1\155\2\66\13\0"+
    "\1\275\121\0\1\276\103\0\1\277\47\0\1\300\107\0"+
    "\1\301\56\0\1\302\71\0\1\303\36\0\2\304\3\0"+
    "\12\304\1\66\23\304\1\0\11\304\6\0\1\304\1\155"+
    "\2\66\14\0\1\305\124\0\1\306\60\0\1\307\73\0"+
    "\1\310\66\0\1\311\44\0\1\312\64\0\2\313\3\0"+
    "\12\313\1\66\23\313\1\0\11\313\6\0\1\313\1\155"+
    "\2\66\15\0\1\314\125\0\1\315\62\0\1\316\73\0"+
    "\1\317\60\0\1\320\73\0\1\321\37\0\2\66\3\0"+
    "\36\66\1\0\11\66\6\0\1\66\1\155\2\66\16\0"+
    "\1\322\116\0\1\323\62\0\1\324\73\0\1\325\52\0"+
    "\1\326\114\0\1\327\67\0\1\330\65\0\1\331\46\0"+
    "\1\332\113\0\1\333\77\0\1\334\63\0\1\335\56\0"+
    "\1\336\114\0\1\337\64\0\1\340\71\0\1\341\47\0"+
    "\1\342\125\0\1\343\63\0\1\344\71\0\1\345\50\0"+
    "\1\346\110\0\1\347\73\0\1\350\31\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11368];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\17\1\6\11\2\1\16\0"+
    "\1\11\10\0\1\1\31\0\1\1\2\0\3\11\6\0"+
    "\1\11\1\0\1\11\15\0\1\1\2\0\1\11\5\0"+
    "\1\11\1\0\2\11\6\0\1\11\4\0\1\1\5\0"+
    "\2\11\1\0\1\11\4\0\1\11\3\0\1\1\4\0"+
    "\1\11\10\0\1\1\1\0\1\1\3\0\1\11\3\0"+
    "\1\11\1\0\1\1\1\0\1\11\2\0\2\11\1\0"+
    "\1\11\12\0\1\11\13\0\2\11\25\0\3\11\1\0"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[232];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private Konquest konquestFrame;
    
    public MapConfigFileLexer(java.io.Reader in, Konquest konquestFrame) {
        this.konquestFrame = konquestFrame;    
        this.zzReader = in;
    }
        
    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline+1, yycolumn, value);
    }

    private void printToken(String token){
        System.out.println(token);
    }

    private void printError(String lexeme, int line, int column){
        //principalFrame.printLexicalError(lexeme, line, column);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public MapConfigFileLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 216) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(MapConfigFileSym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { printToken("ERROR"); printError(new String(yytext()), (yyline+1), yycolumn);
            } 
            // fall through
          case 41: break;
          case 2: 
            { printToken("INTEGER"); return symbol(MapConfigFileSym.INTEGER, new String(yytext()));
            } 
            // fall through
          case 42: break;
          case 3: 
            { 
            } 
            // fall through
          case 43: break;
          case 4: 
            { printToken("CURLYBRACKETO"); return symbol(MapConfigFileSym.CURLYBRACKETO, new String("{"));
            } 
            // fall through
          case 44: break;
          case 5: 
            { printToken("CURLYBRACKETC"); return symbol(MapConfigFileSym.CURLYBRACKETC, new String("}"));
            } 
            // fall through
          case 45: break;
          case 6: 
            { printToken("SQUAREBRACKETO"); return symbol(MapConfigFileSym.SQUAREBRACKETO, new String("["));
            } 
            // fall through
          case 46: break;
          case 7: 
            { printToken("SQUAREBRACKETC"); return symbol(MapConfigFileSym.SQUAREBRACKETC, new String("]"));
            } 
            // fall through
          case 47: break;
          case 8: 
            { printToken("COLON"); return symbol(MapConfigFileSym.COLON, new String(":"));
            } 
            // fall through
          case 48: break;
          case 9: 
            { printToken("COMMA"); return symbol(MapConfigFileSym.COMMA, new String(","));
            } 
            // fall through
          case 49: break;
          case 10: 
            { printToken("ID"); return symbol(MapConfigFileSym.ID, new String("id"));
            } 
            // fall through
          case 50: break;
          case 11: 
            { printToken("DOUBLE"); return symbol(MapConfigFileSym.DOUBLE, new String(yytext()));
            } 
            // fall through
          case 51: break;
          case 12: 
            { printToken("NAMEPLANET"); return symbol(MapConfigFileSym.NAMEPLANET, new String(yytext()));
            } 
            // fall through
          case 52: break;
          case 13: 
            { printToken("NAMEID"); return symbol(MapConfigFileSym.NAMEID, new String(yytext()));
            } 
            // fall through
          case 53: break;
          case 14: 
            { printToken("MAP"); return symbol(MapConfigFileSym.MAP, new String("MAPA"));
            } 
            // fall through
          case 54: break;
          case 15: 
            { printToken("TRUE"); return symbol(MapConfigFileSym.TRUE, new String("true"));
            } 
            // fall through
          case 55: break;
          case 16: 
            { printToken("TYPE"); return symbol(MapConfigFileSym.TYPE, new String("tipo"));
            } 
            // fall through
          case 56: break;
          case 17: 
            { printToken("NAMEPLAYER"); return symbol(MapConfigFileSym.NAMEPLAYER, new String(yytext()));
            } 
            // fall through
          case 57: break;
          case 18: 
            { printToken("EASY"); return symbol(MapConfigFileSym.EASY, new String("FACIL"));
            } 
            // fall through
          case 58: break;
          case 19: 
            { printToken("FALSE"); return symbol(MapConfigFileSym.FALSE, new String("false"));
            } 
            // fall through
          case 59: break;
          case 20: 
            { printToken("ROWS"); return symbol(MapConfigFileSym.ROWS, new String("filas"));
            } 
            // fall through
          case 60: break;
          case 21: 
            { printToken("SPACESHIPS"); return symbol(MapConfigFileSym.SPACESHIPS, new String("naves"));
            } 
            // fall through
          case 61: break;
          case 22: 
            { printToken("HUMAN"); return symbol(MapConfigFileSym.HUMAN, new String("HUMANO"));
            } 
            // fall through
          case 62: break;
          case 23: 
            { printToken("SIZE"); return symbol(MapConfigFileSym.SIZE, new String("tamaño"));
            } 
            // fall through
          case 63: break;
          case 24: 
            { printToken("RANDOM"); return symbol(MapConfigFileSym.RANDOM, new String("alAzar"));
            } 
            // fall through
          case 64: break;
          case 25: 
            { printToken("NAME"); return symbol(MapConfigFileSym.NAME, new String("nombre"));
            } 
            // fall through
          case 65: break;
          case 26: 
            { printToken("HARD"); return symbol(MapConfigFileSym.HARD, new String("DIFICIL"));
            } 
            // fall through
          case 66: break;
          case 27: 
            { printToken("PLANETS"); return symbol(MapConfigFileSym.PLANETS, new String("PLANETAS"));
            } 
            // fall through
          case 67: break;
          case 28: 
            { printToken("ACCUMULATE"); return symbol(MapConfigFileSym.ACCUMULATE, new String("acumular"));
            } 
            // fall through
          case 68: break;
          case 29: 
            { printToken("COLUMNS"); return symbol(MapConfigFileSym.COLUMNS, new String("columnas"));
            } 
            // fall through
          case 69: break;
          case 30: 
            { printToken("PLAYERPLANETS"); return symbol(MapConfigFileSym.PLAYERPLANETS, new String("planetas"));
            } 
            // fall through
          case 70: break;
          case 31: 
            { printToken("NEUTRAL"); return symbol(MapConfigFileSym.NEUTRAL, new String("NEUTRALES"));
            } 
            // fall through
          case 71: break;
          case 32: 
            { printToken("PLAYERS"); return symbol(MapConfigFileSym.PLAYERS, new String("JUGADORES"));
            } 
            // fall through
          case 72: break;
          case 33: 
            { printToken("BLIND"); return symbol(MapConfigFileSym.BLIND, new String("mapaCiego"));
            } 
            // fall through
          case 73: break;
          case 34: 
            { printToken("PRODUCTION"); return symbol(MapConfigFileSym.PRODUCTION, new String("produccion"));
            } 
            // fall through
          case 74: break;
          case 35: 
            { printToken("COMPLETION"); return symbol(MapConfigFileSym.COMPLETION, new String("finalizacion"));
            } 
            // fall through
          case 75: break;
          case 36: 
            { printToken("SHOWSPACESHIPS"); return symbol(MapConfigFileSym.SHOWSPACESHIPS, new String("mostrarNaves"));
            } 
            // fall through
          case 76: break;
          case 37: 
            { printToken("NEUTRALP"); return symbol(MapConfigFileSym.NEUTRALP, new String("planetasNeutrales"));
            } 
            // fall through
          case 77: break;
          case 38: 
            { printToken("DEATHRATE"); return symbol(MapConfigFileSym.DEATHRATE, new String("porcentajeMuertes"));
            } 
            // fall through
          case 78: break;
          case 39: 
            { printToken("NEUTRALPLANETS"); return symbol(MapConfigFileSym.NEUTRALPLANETS, new String("PLANETAS_NEUTRALES"));
            } 
            // fall through
          case 79: break;
          case 40: 
            { printToken("SHOWSTATISTICS"); return symbol(MapConfigFileSym.SHOWSTATISTICS, new String("mostrarEstadisticas"));
            } 
            // fall through
          case 80: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = MapConfigFileSym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java MapConfigFileLexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        MapConfigFileLexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new MapConfigFileLexer(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
