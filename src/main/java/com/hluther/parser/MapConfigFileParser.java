
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.hluther.parser;

import java_cup.runtime.*;
import com.hluther.gui.Konquest;
import com.hluther.lexer.MapConfigFileLexer;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class MapConfigFileParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return MapConfigFileSym.class;
}

  /** Default constructor. */
  @Deprecated
  public MapConfigFileParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public MapConfigFileParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MapConfigFileParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\201\000\002\002\004\000\002\002\005\000\002\040" +
    "\011\000\002\040\011\000\002\040\011\000\002\040\011" +
    "\000\002\040\011\000\002\040\011\000\002\040\011\000" +
    "\002\040\011\000\002\040\011\000\002\040\011\000\002" +
    "\040\011\000\002\040\011\000\002\040\011\000\002\040" +
    "\011\000\002\040\011\000\002\040\011\000\002\040\011" +
    "\000\002\040\011\000\002\040\011\000\002\040\011\000" +
    "\002\040\011\000\002\040\011\000\002\040\011\000\002" +
    "\040\011\000\002\026\007\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\005\000\002\027\005\000\002\027\005\000\002" +
    "\027\005\000\002\027\005\000\002\027\005\000\002\027" +
    "\005\000\002\027\005\000\002\030\005\000\002\041\003" +
    "\000\002\041\003\000\002\041\003\000\002\031\007\000" +
    "\002\042\005\000\002\042\005\000\002\043\005\000\002" +
    "\044\005\000\002\033\007\000\002\045\007\000\002\045" +
    "\007\000\002\045\007\000\002\045\007\000\002\045\007" +
    "\000\002\045\007\000\002\046\005\000\002\047\005\000" +
    "\002\050\005\000\002\051\003\000\002\051\003\000\002" +
    "\034\005\000\002\032\005\000\002\035\005\000\002\036" +
    "\005\000\002\037\005\000\002\014\007\000\002\015\007" +
    "\000\002\015\005\000\002\016\011\000\002\016\011\000" +
    "\002\016\011\000\002\016\011\000\002\016\011\000\002" +
    "\016\011\000\002\016\011\000\002\016\011\000\002\016" +
    "\011\000\002\016\011\000\002\016\011\000\002\016\011" +
    "\000\002\016\011\000\002\016\011\000\002\016\011\000" +
    "\002\016\011\000\002\016\011\000\002\016\011\000\002" +
    "\016\011\000\002\016\011\000\002\016\011\000\002\016" +
    "\011\000\002\016\011\000\002\016\011\000\002\017\005" +
    "\000\002\020\005\000\002\021\005\000\002\022\005\000" +
    "\002\023\007\000\002\024\007\000\002\024\005\000\002" +
    "\025\007\000\002\025\007\000\002\025\007\000\002\025" +
    "\007\000\002\025\007\000\002\025\007\000\002\025\003" +
    "\000\002\003\007\000\002\005\007\000\002\005\005\000" +
    "\002\004\007\000\002\004\007\000\002\004\007\000\002" +
    "\004\007\000\002\004\007\000\002\004\007\000\002\006" +
    "\005\000\002\007\003\000\002\007\003\000\002\010\007" +
    "\000\002\011\005\000\002\011\003\000\002\012\005\000" +
    "\002\013\003\000\002\013\003\000\002\013\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01af\000\004\007\005\001\002\000\004\002\u01b1\001" +
    "\002\000\012\021\013\037\016\042\006\043\015\001\002" +
    "\000\004\013\u018f\001\002\000\004\014\u0176\001\002\000" +
    "\004\014\u015d\001\002\000\004\014\u0144\001\002\000\004" +
    "\010\u0143\001\002\000\004\013\331\001\002\000\004\014" +
    "\300\001\002\000\004\013\214\001\002\000\004\013\017" +
    "\001\002\000\004\011\020\001\002\000\004\007\022\001" +
    "\002\000\004\012\213\001\002\000\012\035\027\040\031" +
    "\041\023\051\032\001\002\000\004\013\211\001\002\000" +
    "\004\014\160\001\002\000\004\014\127\001\002\000\004" +
    "\010\124\001\002\000\004\013\122\001\002\000\004\014" +
    "\071\001\002\000\004\013\067\001\002\000\004\013\065" +
    "\001\002\000\004\014\034\001\002\000\010\040\031\041" +
    "\023\051\032\001\002\000\004\014\056\001\002\000\004" +
    "\014\047\001\002\000\004\014\040\001\002\000\006\040" +
    "\031\041\023\001\002\000\004\014\045\001\002\000\004" +
    "\014\043\001\002\000\004\041\023\001\002\000\004\010" +
    "\uffb8\001\002\000\004\040\031\001\002\000\004\010\uffb4" +
    "\001\002\000\006\041\023\051\032\001\002\000\004\014" +
    "\054\001\002\000\004\014\052\001\002\000\004\041\023" +
    "\001\002\000\004\010\uffb7\001\002\000\004\051\032\001" +
    "\002\000\004\010\uffb6\001\002\000\006\040\031\051\032" +
    "\001\002\000\004\014\063\001\002\000\004\014\061\001" +
    "\002\000\004\040\031\001\002\000\004\010\uffb3\001\002" +
    "\000\004\051\032\001\002\000\004\010\uffb2\001\002\000" +
    "\004\005\066\001\002\000\006\010\uffa1\014\uffa1\001\002" +
    "\000\004\015\070\001\002\000\006\010\uffa0\014\uffa0\001" +
    "\002\000\010\035\027\040\031\051\032\001\002\000\004" +
    "\014\113\001\002\000\004\014\104\001\002\000\004\014" +
    "\075\001\002\000\006\035\027\040\031\001\002\000\004" +
    "\014\102\001\002\000\004\014\100\001\002\000\004\035" +
    "\027\001\002\000\004\010\uffa8\001\002\000\004\040\031" +
    "\001\002\000\004\010\uffa4\001\002\000\006\035\027\051" +
    "\032\001\002\000\004\014\111\001\002\000\004\014\107" +
    "\001\002\000\004\035\027\001\002\000\004\010\uffa7\001" +
    "\002\000\004\051\032\001\002\000\004\010\uffa6\001\002" +
    "\000\006\040\031\051\032\001\002\000\004\014\120\001" +
    "\002\000\004\014\116\001\002\000\004\040\031\001\002" +
    "\000\004\010\uffa3\001\002\000\004\051\032\001\002\000" +
    "\004\010\uffa2\001\002\000\004\015\123\001\002\000\006" +
    "\010\uff9f\014\uff9f\001\002\000\006\012\uffba\014\125\001" +
    "\002\000\004\007\022\001\002\000\004\012\uffbb\001\002" +
    "\000\010\035\027\040\031\041\023\001\002\000\004\014" +
    "\151\001\002\000\004\014\142\001\002\000\004\014\133" +
    "\001\002\000\006\035\027\041\023\001\002\000\004\014" +
    "\140\001\002\000\004\014\136\001\002\000\004\041\023" +
    "\001\002\000\004\010\uffad\001\002\000\004\035\027\001" +
    "\002\000\004\010\uffb1\001\002\000\006\040\031\041\023" +
    "\001\002\000\004\014\147\001\002\000\004\014\145\001" +
    "\002\000\004\041\023\001\002\000\004\010\uffb9\001\002" +
    "\000\004\040\031\001\002\000\004\010\uffb5\001\002\000" +
    "\006\035\027\040\031\001\002\000\004\014\156\001\002" +
    "\000\004\014\154\001\002\000\004\035\027\001\002\000" +
    "\004\010\uffa9\001\002\000\004\040\031\001\002\000\004" +
    "\010\uffa5\001\002\000\010\035\027\041\023\051\032\001" +
    "\002\000\004\014\202\001\002\000\004\014\173\001\002" +
    "\000\004\014\164\001\002\000\006\035\027\041\023\001" +
    "\002\000\004\014\171\001\002\000\004\014\167\001\002" +
    "\000\004\041\023\001\002\000\004\010\uffac\001\002\000" +
    "\004\035\027\001\002\000\004\010\uffb0\001\002\000\006" +
    "\041\023\051\032\001\002\000\004\014\200\001\002\000" +
    "\004\014\176\001\002\000\004\041\023\001\002\000\004" +
    "\010\uffab\001\002\000\004\051\032\001\002\000\004\010" +
    "\uffaa\001\002\000\006\035\027\051\032\001\002\000\004" +
    "\014\207\001\002\000\004\014\205\001\002\000\004\035" +
    "\027\001\002\000\004\010\uffaf\001\002\000\004\051\032" +
    "\001\002\000\004\010\uffae\001\002\000\004\016\212\001" +
    "\002\000\006\010\uff9e\014\uff9e\001\002\000\006\010\uffbc" +
    "\014\uffbc\001\002\000\004\011\215\001\002\000\004\007" +
    "\217\001\002\000\004\012\277\001\002\000\010\044\220" +
    "\045\226\051\224\001\002\000\004\013\270\001\002\000" +
    "\004\010\265\001\002\000\004\014\256\001\002\000\004" +
    "\014\247\001\002\000\004\013\243\001\002\000\004\014" +
    "\234\001\002\000\004\013\227\001\002\000\010\046\233" +
    "\047\231\050\230\001\002\000\006\010\uff81\014\uff81\001" +
    "\002\000\006\010\uff82\014\uff82\001\002\000\006\010\uff84" +
    "\014\uff84\001\002\000\006\010\uff83\014\uff83\001\002\000" +
    "\006\045\226\051\224\001\002\000\004\014\241\001\002" +
    "\000\004\014\237\001\002\000\004\051\224\001\002\000" +
    "\004\010\uff8f\001\002\000\004\045\226\001\002\000\004" +
    "\010\uff90\001\002\000\006\005\246\006\244\001\002\000" +
    "\006\010\uff88\014\uff88\001\002\000\006\010\uff8a\014\uff8a" +
    "\001\002\000\006\010\uff89\014\uff89\001\002\000\006\044" +
    "\220\051\224\001\002\000\004\014\254\001\002\000\004" +
    "\014\252\001\002\000\004\051\224\001\002\000\004\010" +
    "\uff8b\001\002\000\004\044\220\001\002\000\004\010\uff8c" +
    "\001\002\000\006\044\220\045\226\001\002\000\004\014" +
    "\263\001\002\000\004\014\261\001\002\000\004\045\226" +
    "\001\002\000\004\010\uff8e\001\002\000\004\044\220\001" +
    "\002\000\004\010\uff8d\001\002\000\006\012\uff91\014\266" +
    "\001\002\000\004\007\217\001\002\000\004\012\uff92\001" +
    "\002\000\004\011\271\001\002\000\004\005\273\001\002" +
    "\000\004\012\276\001\002\000\006\012\uff85\014\274\001" +
    "\002\000\004\005\273\001\002\000\004\012\uff86\001\002" +
    "\000\006\010\uff87\014\uff87\001\002\000\006\010\uff93\014" +
    "\uff93\001\002\000\010\021\013\037\016\043\015\001\002" +
    "\000\004\014\322\001\002\000\004\014\313\001\002\000" +
    "\004\014\304\001\002\000\006\021\013\043\015\001\002" +
    "\000\004\014\311\001\002\000\004\014\307\001\002\000" +
    "\004\043\015\001\002\000\004\010\ufff5\001\002\000\004" +
    "\021\013\001\002\000\004\010\ufff4\001\002\000\006\037" +
    "\016\043\015\001\002\000\004\014\320\001\002\000\004" +
    "\014\316\001\002\000\004\043\015\001\002\000\004\010" +
    "\ufff6\001\002\000\004\037\016\001\002\000\004\010\ufff2" +
    "\001\002\000\006\021\013\037\016\001\002\000\004\014" +
    "\327\001\002\000\004\014\325\001\002\000\004\021\013" +
    "\001\002\000\004\010\ufff0\001\002\000\004\037\016\001" +
    "\002\000\004\010\ufff1\001\002\000\004\007\332\001\002" +
    "\000\022\022\345\023\351\026\336\027\350\030\337\031" +
    "\335\032\334\036\343\001\002\000\006\010\uffe6\014\u0141" +
    "\001\002\000\004\013\u011c\001\002\000\004\013\u011a\001" +
    "\002\000\004\013\u0118\001\002\000\004\013\u0114\001\002" +
    "\000\006\010\uffe3\014\u0112\001\002\000\006\010\uffdf\014" +
    "\u0110\001\002\000\006\010\uffe4\014\u010e\001\002\000\004" +
    "\013\u010c\001\002\000\006\010\uffe2\014\u010a\001\002\000" +
    "\004\013\u0105\001\002\000\006\010\uffe1\014\u0103\001\002" +
    "\000\004\010\u0102\001\002\000\004\013\u0100\001\002\000" +
    "\004\013\360\001\002\000\006\010\uffe0\014\356\001\002" +
    "\000\006\010\uffe5\014\354\001\002\000\022\022\345\023" +
    "\351\026\336\027\350\030\337\031\335\032\334\036\343" +
    "\001\002\000\004\010\uffdd\001\002\000\022\022\345\023" +
    "\351\026\336\027\350\030\337\031\335\032\334\036\343" +
    "\001\002\000\004\010\uffd8\001\002\000\004\007\361\001" +
    "\002\000\006\024\362\025\366\001\002\000\004\013\376" +
    "\001\002\000\004\014\374\001\002\000\004\010\373\001" +
    "\002\000\004\014\371\001\002\000\004\013\367\001\002" +
    "\000\004\015\370\001\002\000\006\010\uffce\014\uffce\001" +
    "\002\000\004\025\366\001\002\000\004\010\uffd1\001\002" +
    "\000\006\010\uffd2\014\uffd2\001\002\000\004\024\362\001" +
    "\002\000\004\010\uffd0\001\002\000\004\015\377\001\002" +
    "\000\006\010\uffcf\014\uffcf\001\002\000\004\015\u0101\001" +
    "\002\000\006\010\uffc0\014\uffc0\001\002\000\006\010\uffe7" +
    "\014\uffe7\001\002\000\022\022\345\023\351\026\336\027" +
    "\350\030\337\031\335\032\334\036\343\001\002\000\004" +
    "\010\uffd9\001\002\000\010\004\u0107\005\u0109\006\u0106\001" +
    "\002\000\006\010\uffd3\014\uffd3\001\002\000\006\010\uffd5" +
    "\014\uffd5\001\002\000\006\010\uffd6\014\uffd6\001\002\000" +
    "\006\010\uffd4\014\uffd4\001\002\000\022\022\345\023\351" +
    "\026\336\027\350\030\337\031\335\032\334\036\343\001" +
    "\002\000\004\010\uffda\001\002\000\004\015\u010d\001\002" +
    "\000\006\010\uffbd\014\uffbd\001\002\000\022\022\345\023" +
    "\351\026\336\027\350\030\337\031\335\032\334\036\343" +
    "\001\002\000\004\010\uffdc\001\002\000\022\022\345\023" +
    "\351\026\336\027\350\030\337\031\335\032\334\036\343" +
    "\001\002\000\004\010\uffd7\001\002\000\022\022\345\023" +
    "\351\026\336\027\350\030\337\031\335\032\334\036\343" +
    "\001\002\000\004\010\uffdb\001\002\000\006\017\u0116\020" +
    "\u0117\001\002\000\006\010\uffbf\014\uffbf\001\002\000\006" +
    "\010\uffc3\014\uffc3\001\002\000\006\010\uffc2\014\uffc2\001" +
    "\002\000\006\017\u0116\020\u0117\001\002\000\006\010\uffc1" +
    "\014\uffc1\001\002\000\006\017\u0116\020\u0117\001\002\000" +
    "\006\010\uffbe\014\uffbe\001\002\000\004\007\u011d\001\002" +
    "\000\010\033\u0120\034\u0121\035\u011f\001\002\000\004\014" +
    "\u013a\001\002\000\004\013\u0138\001\002\000\004\013\u0136" +
    "\001\002\000\004\013\u0134\001\002\000\004\010\u0133\001" +
    "\002\000\004\014\u012c\001\002\000\004\014\u0125\001\002" +
    "\000\006\033\u0120\034\u0121\001\002\000\004\014\u012a\001" +
    "\002\000\004\014\u0128\001\002\000\004\033\u0120\001\002" +
    "\000\004\010\uffc7\001\002\000\004\034\u0121\001\002\000" +
    "\004\010\uffc8\001\002\000\006\033\u0120\035\u011f\001\002" +
    "\000\004\014\u0131\001\002\000\004\014\u012f\001\002\000" +
    "\004\033\u0120\001\002\000\004\010\uffc9\001\002\000\004" +
    "\035\u011f\001\002\000\004\010\uffca\001\002\000\006\010" +
    "\uffcd\014\uffcd\001\002\000\006\017\u0116\020\u0117\001\002" +
    "\000\006\010\uffc5\014\uffc5\001\002\000\006\017\u0116\020" +
    "\u0117\001\002\000\006\010\uffc6\014\uffc6\001\002\000\004" +
    "\015\u0139\001\002\000\006\010\uffc4\014\uffc4\001\002\000" +
    "\006\034\u0121\035\u011f\001\002\000\004\014\u013f\001\002" +
    "\000\004\014\u013d\001\002\000\004\034\u0121\001\002\000" +
    "\004\010\uffcb\001\002\000\004\035\u011f\001\002\000\004" +
    "\010\uffcc\001\002\000\022\022\345\023\351\026\336\027" +
    "\350\030\337\031\335\032\334\036\343\001\002\000\004" +
    "\010\uffde\001\002\000\004\002\000\001\002\000\010\021" +
    "\013\042\006\043\015\001\002\000\004\014\u0156\001\002" +
    "\000\004\014\u014f\001\002\000\004\014\u0148\001\002\000" +
    "\006\042\006\043\015\001\002\000\004\014\u014d\001\002" +
    "\000\004\014\u014b\001\002\000\004\042\006\001\002\000" +
    "\004\010\ufffa\001\002\000\004\043\015\001\002\000\004" +
    "\010\ufffe\001\002\000\006\021\013\042\006\001\002\000" +
    "\004\014\u0154\001\002\000\004\014\u0152\001\002\000\004" +
    "\042\006\001\002\000\004\010\ufff9\001\002\000\004\021" +
    "\013\001\002\000\004\010\ufff8\001\002\000\006\021\013" +
    "\043\015\001\002\000\004\014\u015b\001\002\000\004\014" +
    "\u0159\001\002\000\004\043\015\001\002\000\004\010\ufffd" +
    "\001\002\000\004\021\013\001\002\000\004\010\ufffc\001" +
    "\002\000\010\021\013\037\016\042\006\001\002\000\004" +
    "\014\u016f\001\002\000\004\014\u0168\001\002\000\004\014" +
    "\u0161\001\002\000\006\021\013\042\006\001\002\000\004" +
    "\014\u0166\001\002\000\004\014\u0164\001\002\000\004\042" +
    "\006\001\002\000\004\010\uffed\001\002\000\004\021\013" +
    "\001\002\000\004\010\uffec\001\002\000\006\037\016\042" +
    "\006\001\002\000\004\014\u016d\001\002\000\004\014\u016b" +
    "\001\002\000\004\042\006\001\002\000\004\010\uffee\001" +
    "\002\000\004\037\016\001\002\000\004\010\uffea\001\002" +
    "\000\006\021\013\037\016\001\002\000\004\014\u0174\001" +
    "\002\000\004\014\u0172\001\002\000\004\021\013\001\002" +
    "\000\004\010\uffe8\001\002\000\004\037\016\001\002\000" +
    "\004\010\uffe9\001\002\000\010\037\016\042\006\043\015" +
    "\001\002\000\004\014\u0188\001\002\000\004\014\u0181\001" +
    "\002\000\004\014\u017a\001\002\000\006\042\006\043\015" +
    "\001\002\000\004\014\u017f\001\002\000\004\014\u017d\001" +
    "\002\000\004\042\006\001\002\000\004\010\ufffb\001\002" +
    "\000\004\043\015\001\002\000\004\010\uffff\001\002\000" +
    "\006\037\016\042\006\001\002\000\004\014\u0186\001\002" +
    "\000\004\014\u0184\001\002\000\004\042\006\001\002\000" +
    "\004\010\uffef\001\002\000\004\037\016\001\002\000\004" +
    "\010\uffeb\001\002\000\006\037\016\043\015\001\002\000" +
    "\004\014\u018d\001\002\000\004\014\u018b\001\002\000\004" +
    "\043\015\001\002\000\004\010\ufff7\001\002\000\004\037" +
    "\016\001\002\000\004\010\ufff3\001\002\000\004\011\u0190" +
    "\001\002\000\004\007\u0191\001\002\000\012\035\027\040" +
    "\031\041\023\051\032\001\002\000\004\012\u0193\001\002" +
    "\000\006\010\uff9d\014\uff9d\001\002\000\004\014\u01aa\001" +
    "\002\000\004\014\u01a3\001\002\000\004\010\uff94\001\002" +
    "\000\004\010\u01a0\001\002\000\004\014\u0199\001\002\000" +
    "\010\035\027\040\031\051\032\001\002\000\004\014\u019e" +
    "\001\002\000\004\014\u019c\001\002\000\006\035\027\040" +
    "\031\001\002\000\006\010\uff96\014\100\001\002\000\006" +
    "\035\027\051\032\001\002\000\006\010\uff95\014\107\001" +
    "\002\000\006\012\uff9b\014\u01a1\001\002\000\004\007\u0191" +
    "\001\002\000\004\012\uff9c\001\002\000\010\035\027\040" +
    "\031\041\023\001\002\000\004\014\u01a8\001\002\000\004" +
    "\014\u01a6\001\002\000\006\035\027\041\023\001\002\000" +
    "\006\010\uff9a\014\140\001\002\000\006\035\027\040\031" +
    "\001\002\000\006\010\uff99\014\154\001\002\000\010\035" +
    "\027\041\023\051\032\001\002\000\004\014\u01af\001\002" +
    "\000\004\014\u01ad\001\002\000\006\035\027\041\023\001" +
    "\002\000\006\010\uff98\014\171\001\002\000\006\035\027" +
    "\051\032\001\002\000\006\010\uff97\014\205\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01af\000\004\002\003\001\001\000\002\001\001\000" +
    "\014\003\007\014\010\023\013\026\006\040\011\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\020\001\001\000\002\001\001\000\014" +
    "\016\025\017\024\020\023\021\032\022\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\017\036" +
    "\020\035\022\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\020\041\022\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\043\001" +
    "\001\000\002\001\001\000\004\020\045\001\001\000\002" +
    "\001\001\000\006\017\050\022\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\052\001\001\000\002" +
    "\001\001\000\004\017\054\001\001\000\002\001\001\000" +
    "\006\017\057\020\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\061\001\001\000\002\001\001\000" +
    "\004\017\063\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\017\073\020\072\021\071\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\020\076\021" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\100\001\001\000\002\001\001\000\004\020\102\001" +
    "\001\000\002\001\001\000\006\017\105\021\104\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\107\001" +
    "\001\000\002\001\001\000\004\017\111\001\001\000\002" +
    "\001\001\000\006\017\114\020\113\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\116\001\001\000\002" +
    "\001\001\000\004\017\120\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\125\001\001\000\002\001\001\000\010\020\131\021" +
    "\130\022\127\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\021\134\022\133\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\136\001\001" +
    "\000\002\001\001\000\004\021\140\001\001\000\002\001" +
    "\001\000\006\020\143\022\142\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\145\001\001\000\002\001" +
    "\001\000\004\020\147\001\001\000\002\001\001\000\006" +
    "\020\152\021\151\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\154\001\001\000\002\001\001\000\004" +
    "\020\156\001\001\000\002\001\001\000\010\017\162\021" +
    "\161\022\160\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\021\165\022\164\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\167\001\001" +
    "\000\002\001\001\000\004\021\171\001\001\000\002\001" +
    "\001\000\006\017\174\022\173\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\176\001\001\000\002\001" +
    "\001\000\004\017\200\001\001\000\002\001\001\000\006" +
    "\017\203\021\202\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\205\001\001\000\002\001\001\000\004" +
    "\017\207\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\215\001\001\000\002\001\001\000\012\004\220\006" +
    "\221\010\224\012\222\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\231" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\234\012\235\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\237\001" +
    "\001\000\002\001\001\000\004\012\241\001\001\000\002" +
    "\001\001\000\004\007\244\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\247\010\250" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\252\001\001\000\002\001\001\000\004\010\254\001\001" +
    "\000\002\001\001\000\006\010\257\012\256\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\261\001\001" +
    "\000\002\001\001\000\004\010\263\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\266\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\271\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\274\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\003\300\014\302\026\301\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\304\026" +
    "\305\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\307\001\001\000\002\001\001\000\004\026\311\001" +
    "\001\000\002\001\001\000\006\003\313\014\314\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\316\001" +
    "\001\000\002\001\001\000\004\014\320\001\001\000\002" +
    "\001\001\000\006\014\323\026\322\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\325\001\001\000\002" +
    "\001\001\000\004\014\327\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\027\346\030\332\031\352\032\343" +
    "\033\341\034\337\035\345\036\351\037\340\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\027\354\030\332\031\352\032\343\033" +
    "\341\034\337\035\345\036\351\037\340\001\001\000\002" +
    "\001\001\000\024\027\356\030\332\031\352\032\343\033" +
    "\341\034\337\035\345\036\351\037\340\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\042\363\043\364\044" +
    "\362\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\044\371\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\043\374\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\027" +
    "\u0103\030\332\031\352\032\343\033\341\034\337\035\345" +
    "\036\351\037\340\001\001\000\002\001\001\000\004\041" +
    "\u0107\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\027\u010a\030\332\031" +
    "\352\032\343\033\341\034\337\035\345\036\351\037\340" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\027\u010e\030\332\031\352\032\343\033\341" +
    "\034\337\035\345\036\351\037\340\001\001\000\002\001" +
    "\001\000\024\027\u0110\030\332\031\352\032\343\033\341" +
    "\034\337\035\345\036\351\037\340\001\001\000\002\001" +
    "\001\000\024\027\u0112\030\332\031\352\032\343\033\341" +
    "\034\337\035\345\036\351\037\340\001\001\000\002\001" +
    "\001\000\004\051\u0114\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\051\u0118\001\001\000" +
    "\002\001\001\000\004\051\u011a\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\045\u0121\046\u011d\047\u0122\050" +
    "\u0123\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\046\u0125\047\u0126\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\046\u0128\001" +
    "\001\000\002\001\001\000\004\047\u012a\001\001\000\002" +
    "\001\001\000\006\046\u012c\050\u012d\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\046\u012f\001\001\000\002" +
    "\001\001\000\004\050\u0131\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\051\u0134\001\001\000\002\001\001" +
    "\000\004\051\u0136\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\047\u013a\050\u013b\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\047\u013d\001" +
    "\001\000\002\001\001\000\004\050\u013f\001\001\000\002" +
    "\001\001\000\024\027\u0141\030\332\031\352\032\343\033" +
    "\341\034\337\035\345\036\351\037\340\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\003\u0145\023\u0144\026" +
    "\u0146\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\u0149\023\u0148\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\u014b\001\001\000\002" +
    "\001\001\000\004\003\u014d\001\001\000\002\001\001\000" +
    "\006\023\u014f\026\u0150\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\u0152\001\001\000\002\001\001\000" +
    "\004\026\u0154\001\001\000\002\001\001\000\006\003\u0156" +
    "\026\u0157\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\u0159\001\001\000\002\001\001\000\004\026\u015b" +
    "\001\001\000\002\001\001\000\010\014\u015f\023\u015d\026" +
    "\u015e\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\023\u0161\026\u0162\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\u0164\001\001\000\002" +
    "\001\001\000\004\026\u0166\001\001\000\002\001\001\000" +
    "\006\014\u0169\023\u0168\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\u016b\001\001\000\002\001\001\000" +
    "\004\014\u016d\001\001\000\002\001\001\000\006\014\u0170" +
    "\026\u016f\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\u0172\001\001\000\002\001\001\000\004\014\u0174" +
    "\001\001\000\002\001\001\000\010\003\u0177\014\u0178\023" +
    "\u0176\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\u017b\023\u017a\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\u017d\001\001\000\002" +
    "\001\001\000\004\003\u017f\001\001\000\002\001\001\000" +
    "\006\014\u0182\023\u0181\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\u0184\001\001\000\002\001\001\000" +
    "\004\014\u0186\001\001\000\002\001\001\000\006\003\u0188" +
    "\014\u0189\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\u018b\001\001\000\002\001\001\000\004\014\u018d" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\024" +
    "\u0191\001\001\000\016\016\u0195\017\u0194\020\u0193\021\032" +
    "\022\u0197\025\u0196\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\017\u019a\020" +
    "\u0199\021\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\020\u019c\021\075\001\001\000\002\001\001\000" +
    "\006\017\u019e\021\104\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\u01a1\001\001\000\002\001\001\000" +
    "\010\020\u01a4\021\130\022\u01a3\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\021\134\022\u01a6\001\001\000" +
    "\002\001\001\000\006\020\u01a8\021\151\001\001\000\002" +
    "\001\001\000\010\017\u01ab\021\161\022\u01aa\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\021\165\022\u01ad" +
    "\001\001\000\002\001\001\000\006\017\u01af\021\202\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MapConfigFileParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MapConfigFileParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MapConfigFileParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private Konquest konquestFrame;
  
    public MapConfigFileParser(MapConfigFileLexer lexer, Konquest konquestFrame) { 
        super(lexer);
        this.konquestFrame = konquestFrame; 
    }

    public void syntax_error(Symbol s){
        System.out.println("Error " + s);
        //principalFrame.printSintaxError(s);
    }

    public void unrecovered_syntax_error(Symbol s){
        System.out.println("Error grave " + s);
        //principalFrame.printSintaxError(s);
    } 



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$MapConfigFileParser$actions {
  private final MapConfigFileParser parser;

  /** Constructor */
  CUP$MapConfigFileParser$actions(MapConfigFileParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$MapConfigFileParser$do_action_part00000000(
    int                        CUP$MapConfigFileParser$act_num,
    java_cup.runtime.lr_parser CUP$MapConfigFileParser$parser,
    java.util.Stack            CUP$MapConfigFileParser$stack,
    int                        CUP$MapConfigFileParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MapConfigFileParser$result;

      /* select the action based on the action number */
      switch (CUP$MapConfigFileParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= konquest EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-1)).value;
		RESULT = start_val;
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-1)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MapConfigFileParser$parser.done_parsing();
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // konquest ::= CURLYBRACKETO konquestRulesSelector CURLYBRACKETC 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("konquest",0, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // konquestRulesSelector ::= map COMMA planets COMMA neutralPlanets COMMA players 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("konquestRulesSelector",30, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // konquestRulesSelector ::= planets COMMA map COMMA neutralPlanets COMMA players 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("konquestRulesSelector",30, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // konquestRulesSelector ::= planets COMMA neutralPlanets COMMA map COMMA players 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("konquestRulesSelector",30, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // konquestRulesSelector ::= planets COMMA neutralPlanets COMMA players COMMA map 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("konquestRulesSelector",30, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // konquestRulesSelector ::= map COMMA planets COMMA players COMMA neutralPlanets 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("konquestRulesSelector",30, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // konquestRulesSelector ::= planets COMMA map COMMA players COMMA neutralPlanets 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("konquestRulesSelector",30, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // konquestRulesSelector ::= planets COMMA players COMMA map COMMA neutralPlanets 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("konquestRulesSelector",30, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // konquestRulesSelector ::= planets COMMA players COMMA neutralPlanets COMMA map 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("konquestRulesSelector",30, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // konquestRulesSelector ::= map COMMA neutralPlanets COMMA planets COMMA players 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("konquestRulesSelector",30, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // konquestRulesSelector ::= neutralPlanets COMMA map COMMA planets COMMA players 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("konquestRulesSelector",30, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // konquestRulesSelector ::= neutralPlanets COMMA planets COMMA map COMMA players 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("konquestRulesSelector",30, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // konquestRulesSelector ::= neutralPlanets COMMA planets COMMA players COMMA map 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("konquestRulesSelector",30, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // konquestRulesSelector ::= map COMMA neutralPlanets COMMA players COMMA planets 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("konquestRulesSelector",30, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // konquestRulesSelector ::= neutralPlanets COMMA map COMMA players COMMA planets 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("konquestRulesSelector",30, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // konquestRulesSelector ::= neutralPlanets COMMA players COMMA map COMMA planets 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("konquestRulesSelector",30, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // konquestRulesSelector ::= neutralPlanets COMMA players COMMA planets COMMA map 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("konquestRulesSelector",30, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // konquestRulesSelector ::= map COMMA players COMMA planets COMMA neutralPlanets 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("konquestRulesSelector",30, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // konquestRulesSelector ::= players COMMA map COMMA planets COMMA neutralPlanets 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("konquestRulesSelector",30, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // konquestRulesSelector ::= players COMMA planets COMMA map COMMA neutralPlanets 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("konquestRulesSelector",30, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // konquestRulesSelector ::= players COMMA planets COMMA neutralPlanets COMMA map 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("konquestRulesSelector",30, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // konquestRulesSelector ::= map COMMA players COMMA neutralPlanets COMMA planets 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("konquestRulesSelector",30, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // konquestRulesSelector ::= players COMMA map COMMA neutralPlanets COMMA planets 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("konquestRulesSelector",30, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // konquestRulesSelector ::= players COMMA neutralPlanets COMMA map COMMA planets 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("konquestRulesSelector",30, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // konquestRulesSelector ::= players COMMA neutralPlanets COMMA planets COMMA map 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("konquestRulesSelector",30, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // map ::= MAP COLON CURLYBRACKETO mapRulesSelector CURLYBRACKETC 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("map",20, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // mapRulesSelector ::= id 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("mapRulesSelector",21, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // mapRulesSelector ::= size 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("mapRulesSelector",21, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // mapRulesSelector ::= neutral 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("mapRulesSelector",21, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // mapRulesSelector ::= random 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("mapRulesSelector",21, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // mapRulesSelector ::= neutralPlanetsMap 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("mapRulesSelector",21, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // mapRulesSelector ::= blindMap 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("mapRulesSelector",21, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // mapRulesSelector ::= accumulate 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("mapRulesSelector",21, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // mapRulesSelector ::= completion 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("mapRulesSelector",21, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // mapRulesSelector ::= id COMMA mapRulesSelector 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("mapRulesSelector",21, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // mapRulesSelector ::= size COMMA mapRulesSelector 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("mapRulesSelector",21, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // mapRulesSelector ::= neutral COMMA mapRulesSelector 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("mapRulesSelector",21, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // mapRulesSelector ::= random COMMA mapRulesSelector 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("mapRulesSelector",21, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // mapRulesSelector ::= neutralPlanetsMap COMMA mapRulesSelector 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("mapRulesSelector",21, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // mapRulesSelector ::= blindMap COMMA mapRulesSelector 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("mapRulesSelector",21, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // mapRulesSelector ::= accumulate COMMA mapRulesSelector 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("mapRulesSelector",21, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // mapRulesSelector ::= completion COMMA mapRulesSelector 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("mapRulesSelector",21, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // id ::= ID COLON mapName 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		RESULT = name; System.out.println(name.toString());
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("id",22, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // mapName ::= NAMEID 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		RESULT = name;
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("mapName",31, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // mapName ::= NAMEPLANET 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		RESULT = name;
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("mapName",31, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // mapName ::= NAMEPLAYER 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		RESULT = name;
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("mapName",31, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // size ::= SIZE COLON CURLYBRACKETO sizeRulesSelector CURLYBRACKETC 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("size",23, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // sizeRulesSelector ::= rows COMMA columns 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("sizeRulesSelector",32, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // sizeRulesSelector ::= columns COMMA rows 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("sizeRulesSelector",32, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // rows ::= ROWS COLON INTEGER 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("rows",33, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // columns ::= COLUMNS COLON INTEGER 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("columns",34, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // neutral ::= NEUTRAL COLON CURLYBRACKETO neutralRulesSelector CURLYBRACKETC 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("neutral",25, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // neutralRulesSelector ::= showSpaceShips COMMA showStatistics COMMA production 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("neutralRulesSelector",35, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // neutralRulesSelector ::= showSpaceShips COMMA production COMMA showStatistics 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("neutralRulesSelector",35, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // neutralRulesSelector ::= showStatistics COMMA showSpaceShips COMMA production 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("neutralRulesSelector",35, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // neutralRulesSelector ::= showStatistics COMMA production COMMA showSpaceShips 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("neutralRulesSelector",35, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // neutralRulesSelector ::= production COMMA showSpaceShips COMMA showStatistics 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("neutralRulesSelector",35, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // neutralRulesSelector ::= production COMMA showStatistics COMMA showSpaceShips 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("neutralRulesSelector",35, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // showSpaceShips ::= SHOWSPACESHIPS COLON boolean 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("showSpaceShips",36, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // showStatistics ::= SHOWSTATISTICS COLON boolean 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("showStatistics",37, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // production ::= PRODUCTION COLON INTEGER 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("production",38, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // boolean ::= TRUE 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("boolean",39, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // boolean ::= FALSE 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("boolean",39, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // random ::= RANDOM COLON boolean 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("random",26, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // neutralPlanetsMap ::= NEUTRALP COLON INTEGER 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("neutralPlanetsMap",24, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // blindMap ::= BLIND COLON boolean 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("blindMap",27, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // accumulate ::= ACCUMULATE COLON boolean 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("accumulate",28, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // completion ::= COMPLETION COLON INTEGER 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("completion",29, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // planets ::= PLANETS COLON SQUAREBRACKETO planetsDescription SQUAREBRACKETC 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("planets",10, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // planetsDescription ::= CURLYBRACKETO planetRulesSelector CURLYBRACKETC COMMA planetsDescription 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("planetsDescription",11, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // planetsDescription ::= CURLYBRACKETO planetRulesSelector CURLYBRACKETC 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("planetsDescription",11, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // planetRulesSelector ::= planetName COMMA planetProduction COMMA planetSpaceShips COMMA planetDeathRate 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("planetRulesSelector",12, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // planetRulesSelector ::= planetProduction COMMA planetName COMMA planetSpaceShips COMMA planetDeathRate 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("planetRulesSelector",12, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // planetRulesSelector ::= planetProduction COMMA planetSpaceShips COMMA planetName COMMA planetDeathRate 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("planetRulesSelector",12, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // planetRulesSelector ::= planetProduction COMMA planetSpaceShips COMMA planetDeathRate COMMA planetName 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("planetRulesSelector",12, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // planetRulesSelector ::= planetName COMMA planetProduction COMMA planetDeathRate COMMA planetSpaceShips 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("planetRulesSelector",12, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // planetRulesSelector ::= planetProduction COMMA planetName COMMA planetDeathRate COMMA planetSpaceShips 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("planetRulesSelector",12, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // planetRulesSelector ::= planetProduction COMMA planetDeathRate COMMA planetName COMMA planetSpaceShips 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("planetRulesSelector",12, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // planetRulesSelector ::= planetProduction COMMA planetDeathRate COMMA planetSpaceShips COMMA planetName 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("planetRulesSelector",12, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // planetRulesSelector ::= planetName COMMA planetSpaceShips COMMA planetDeathRate COMMA planetProduction 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("planetRulesSelector",12, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // planetRulesSelector ::= planetSpaceShips COMMA planetName COMMA planetDeathRate COMMA planetProduction 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("planetRulesSelector",12, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // planetRulesSelector ::= planetSpaceShips COMMA planetDeathRate COMMA planetName COMMA planetProduction 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("planetRulesSelector",12, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // planetRulesSelector ::= planetSpaceShips COMMA planetDeathRate COMMA planetProduction COMMA planetName 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("planetRulesSelector",12, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // planetRulesSelector ::= planetName COMMA planetSpaceShips COMMA planetProduction COMMA planetDeathRate 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("planetRulesSelector",12, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // planetRulesSelector ::= planetSpaceShips COMMA planetName COMMA planetProduction COMMA planetDeathRate 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("planetRulesSelector",12, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // planetRulesSelector ::= planetSpaceShips COMMA planetProduction COMMA planetName COMMA planetDeathRate 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("planetRulesSelector",12, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // planetRulesSelector ::= planetSpaceShips COMMA planetProduction COMMA planetDeathRate COMMA planetName 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("planetRulesSelector",12, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // planetRulesSelector ::= planetName COMMA planetDeathRate COMMA planetSpaceShips COMMA planetProduction 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("planetRulesSelector",12, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // planetRulesSelector ::= planetDeathRate COMMA planetName COMMA planetSpaceShips COMMA planetProduction 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("planetRulesSelector",12, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // planetRulesSelector ::= planetDeathRate COMMA planetSpaceShips COMMA planetName COMMA planetProduction 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("planetRulesSelector",12, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // planetRulesSelector ::= planetDeathRate COMMA planetSpaceShips COMMA planetProduction COMMA planetName 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("planetRulesSelector",12, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // planetRulesSelector ::= planetName COMMA planetDeathRate COMMA planetProduction COMMA planetSpaceShips 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("planetRulesSelector",12, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // planetRulesSelector ::= planetDeathRate COMMA planetName COMMA planetProduction COMMA planetSpaceShips 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("planetRulesSelector",12, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // planetRulesSelector ::= planetDeathRate COMMA planetProduction COMMA planetName COMMA planetSpaceShips 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("planetRulesSelector",12, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // planetRulesSelector ::= planetDeathRate COMMA planetProduction COMMA planetSpaceShips COMMA planetName 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("planetRulesSelector",12, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // planetName ::= NAME COLON NAMEPLANET 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("planetName",13, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // planetSpaceShips ::= SPACESHIPS COLON INTEGER 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("planetSpaceShips",14, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // planetProduction ::= PRODUCTION COLON INTEGER 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("planetProduction",15, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // planetDeathRate ::= DEATHRATE COLON DOUBLE 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("planetDeathRate",16, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // neutralPlanets ::= NEUTRALPLANETS COLON SQUAREBRACKETO neutralPlanetsDescription SQUAREBRACKETC 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("neutralPlanets",17, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // neutralPlanetsDescription ::= CURLYBRACKETO neutralPlanetRulesSelector CURLYBRACKETC COMMA neutralPlanetsDescription 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("neutralPlanetsDescription",18, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // neutralPlanetsDescription ::= CURLYBRACKETO neutralPlanetRulesSelector CURLYBRACKETC 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("neutralPlanetsDescription",18, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // neutralPlanetRulesSelector ::= planetName COMMA planetSpaceShips COMMA planetDeathRate 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("neutralPlanetRulesSelector",19, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // neutralPlanetRulesSelector ::= planetName COMMA planetDeathRate COMMA planetSpaceShips 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("neutralPlanetRulesSelector",19, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // neutralPlanetRulesSelector ::= planetSpaceShips COMMA planetName COMMA planetDeathRate 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("neutralPlanetRulesSelector",19, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // neutralPlanetRulesSelector ::= planetSpaceShips COMMA planetDeathRate COMMA planetName 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("neutralPlanetRulesSelector",19, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // neutralPlanetRulesSelector ::= planetDeathRate COMMA planetName COMMA planetSpaceShips 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("neutralPlanetRulesSelector",19, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // neutralPlanetRulesSelector ::= planetDeathRate COMMA planetSpaceShips COMMA planetName 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("neutralPlanetRulesSelector",19, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // neutralPlanetRulesSelector ::= planetRulesSelector 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("neutralPlanetRulesSelector",19, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // players ::= PLAYERS COLON SQUAREBRACKETO playersDescription SQUAREBRACKETC 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("players",1, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // playersDescription ::= CURLYBRACKETO playerRulesSelector CURLYBRACKETC COMMA playersDescription 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("playersDescription",3, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // playersDescription ::= CURLYBRACKETO playerRulesSelector CURLYBRACKETC 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("playersDescription",3, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // playerRulesSelector ::= playerPlanets COMMA playerName COMMA playerType 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("playerRulesSelector",2, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // playerRulesSelector ::= playerPlanets COMMA playerType COMMA playerName 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("playerRulesSelector",2, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // playerRulesSelector ::= playerName COMMA playerPlanets COMMA playerType 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("playerRulesSelector",2, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // playerRulesSelector ::= playerName COMMA playerType COMMA playerPlanets 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("playerRulesSelector",2, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // playerRulesSelector ::= playerType COMMA playerName COMMA playerPlanets 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("playerRulesSelector",2, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // playerRulesSelector ::= playerType COMMA playerPlanets COMMA playerName 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("playerRulesSelector",2, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // playerName ::= NAME COLON name 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("playerName",4, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // name ::= NAMEPLANET 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("name",5, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // name ::= NAMEPLAYER 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("name",5, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // playerPlanets ::= PLAYERPLANETS COLON SQUAREBRACKETO planetsName SQUAREBRACKETC 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("playerPlanets",6, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // planetsName ::= NAMEPLANET COMMA planetsName 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("planetsName",7, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // planetsName ::= NAMEPLANET 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("planetsName",7, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // playerType ::= TYPE COLON type 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("playerType",8, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // type ::= HUMAN 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // type ::= EASY 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // type ::= HARD 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$MapConfigFileParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$MapConfigFileParser$do_action(
    int                        CUP$MapConfigFileParser$act_num,
    java_cup.runtime.lr_parser CUP$MapConfigFileParser$parser,
    java.util.Stack            CUP$MapConfigFileParser$stack,
    int                        CUP$MapConfigFileParser$top)
    throws java.lang.Exception
    {
              return CUP$MapConfigFileParser$do_action_part00000000(
                               CUP$MapConfigFileParser$act_num,
                               CUP$MapConfigFileParser$parser,
                               CUP$MapConfigFileParser$stack,
                               CUP$MapConfigFileParser$top);
    }
}

}
