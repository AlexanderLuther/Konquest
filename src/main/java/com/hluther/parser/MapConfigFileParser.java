
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.hluther.parser;

import java_cup.runtime.*;
import com.hluther.gui.Konquest;
import com.hluther.lexer.MapConfigFileLexer;
import com.hluther.drivers.MapConfigFile;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class MapConfigFileParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return MapConfigFileSym.class;
}

  /** Default constructor. */
  @Deprecated
  public MapConfigFileParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public MapConfigFileParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MapConfigFileParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\253\000\002\002\004\000\002\002\005\000\002\026" +
    "\011\000\002\026\011\000\002\026\011\000\002\026\011" +
    "\000\002\026\011\000\002\026\011\000\002\026\011\000" +
    "\002\026\011\000\002\026\011\000\002\026\011\000\002" +
    "\026\011\000\002\026\011\000\002\026\011\000\002\026" +
    "\011\000\002\026\011\000\002\026\011\000\002\026\011" +
    "\000\002\026\011\000\002\026\011\000\002\026\011\000" +
    "\002\026\011\000\002\026\011\000\002\026\011\000\002" +
    "\026\011\000\002\014\007\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\005\000\002\015\005\000\002\015\005\000\002" +
    "\015\005\000\002\015\005\000\002\015\005\000\002\015" +
    "\005\000\002\015\005\000\002\015\004\000\002\015\004" +
    "\000\002\015\004\000\002\015\005\000\002\016\005\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\017\007\000\002\030\005\000\002\030\005\000\002\031" +
    "\005\000\002\032\005\000\002\021\007\000\002\033\007" +
    "\000\002\033\007\000\002\033\007\000\002\033\007\000" +
    "\002\033\007\000\002\033\007\000\002\034\005\000\002" +
    "\035\005\000\002\036\005\000\002\037\003\000\002\037" +
    "\003\000\002\022\005\000\002\020\005\000\002\023\005" +
    "\000\002\024\005\000\002\025\005\000\002\006\007\000" +
    "\002\007\007\000\002\007\005\000\002\010\011\000\002" +
    "\010\011\000\002\010\011\000\002\010\011\000\002\010" +
    "\011\000\002\010\011\000\002\010\011\000\002\010\011" +
    "\000\002\010\011\000\002\010\011\000\002\010\011\000" +
    "\002\010\011\000\002\010\011\000\002\010\011\000\002" +
    "\010\011\000\002\010\011\000\002\010\011\000\002\010" +
    "\011\000\002\010\011\000\002\010\011\000\002\010\011" +
    "\000\002\010\011\000\002\010\011\000\002\010\011\000" +
    "\002\010\006\000\002\010\006\000\002\010\006\000\002" +
    "\010\006\000\002\040\005\000\002\047\005\000\002\050" +
    "\005\000\002\051\005\000\002\011\007\000\002\012\007" +
    "\000\002\012\005\000\002\013\011\000\002\013\011\000" +
    "\002\013\011\000\002\013\011\000\002\013\011\000\002" +
    "\013\011\000\002\013\011\000\002\013\011\000\002\013" +
    "\011\000\002\013\011\000\002\013\011\000\002\013\011" +
    "\000\002\013\011\000\002\013\011\000\002\013\011\000" +
    "\002\013\011\000\002\013\011\000\002\013\011\000\002" +
    "\013\011\000\002\013\011\000\002\013\011\000\002\013" +
    "\011\000\002\013\011\000\002\013\011\000\002\013\007" +
    "\000\002\013\007\000\002\013\007\000\002\013\007\000" +
    "\002\013\007\000\002\013\007\000\002\013\006\000\002" +
    "\013\006\000\002\013\006\000\002\013\006\000\002\003" +
    "\007\000\002\003\004\000\002\005\007\000\002\005\005" +
    "\000\002\004\007\000\002\004\007\000\002\004\007\000" +
    "\002\004\007\000\002\004\007\000\002\004\007\000\002" +
    "\004\006\000\002\004\006\000\002\004\006\000\002\004" +
    "\006\000\002\004\006\000\002\041\005\000\002\046\003" +
    "\000\002\046\003\000\002\052\002\000\002\043\010\000" +
    "\002\044\005\000\002\044\003\000\002\042\005\000\002" +
    "\045\003\000\002\045\003\000\002\045\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0223\000\004\007\005\001\002\000\004\002\u0225\001" +
    "\002\000\014\003\015\015\013\034\017\037\006\040\016" +
    "\001\002\000\004\013\u01ab\001\002\000\004\014\u0192\001" +
    "\002\000\004\014\u0179\001\002\000\004\014\u0160\001\002" +
    "\000\004\010\u015f\001\002\000\004\013\357\001\002\000" +
    "\004\014\326\001\002\000\004\014\325\001\002\000\004" +
    "\013\226\001\002\000\004\013\020\001\002\000\004\011" +
    "\021\001\002\000\004\007\023\001\002\000\004\012\225" +
    "\001\002\000\014\003\031\032\030\035\033\036\024\046" +
    "\034\001\002\000\004\013\223\001\002\000\004\014\172" +
    "\001\002\000\004\014\141\001\002\000\004\010\136\001" +
    "\002\000\004\013\134\001\002\000\006\010\125\012\124" +
    "\001\002\000\004\014\073\001\002\000\004\013\071\001" +
    "\002\000\004\013\067\001\002\000\004\014\036\001\002" +
    "\000\010\035\033\036\024\046\034\001\002\000\004\014" +
    "\060\001\002\000\004\014\051\001\002\000\004\014\042" +
    "\001\002\000\006\035\033\036\024\001\002\000\004\014" +
    "\047\001\002\000\004\014\045\001\002\000\004\036\024" +
    "\001\002\000\004\010\uffb4\001\002\000\004\035\033\001" +
    "\002\000\004\010\uffb0\001\002\000\006\036\024\046\034" +
    "\001\002\000\004\014\056\001\002\000\004\014\054\001" +
    "\002\000\004\036\024\001\002\000\004\010\uffb3\001\002" +
    "\000\004\046\034\001\002\000\004\010\uffb2\001\002\000" +
    "\006\035\033\046\034\001\002\000\004\014\065\001\002" +
    "\000\004\014\063\001\002\000\004\035\033\001\002\000" +
    "\004\010\uffaf\001\002\000\004\046\034\001\002\000\004" +
    "\010\uffae\001\002\000\004\005\070\001\002\000\006\010" +
    "\uff99\014\uff99\001\002\000\004\026\072\001\002\000\006" +
    "\010\uff98\014\uff98\001\002\000\010\032\030\035\033\046" +
    "\034\001\002\000\004\014\115\001\002\000\004\014\106" +
    "\001\002\000\004\014\077\001\002\000\006\032\030\035" +
    "\033\001\002\000\004\014\104\001\002\000\004\014\102" +
    "\001\002\000\004\032\030\001\002\000\004\010\uffa4\001" +
    "\002\000\004\035\033\001\002\000\004\010\uffa0\001\002" +
    "\000\006\032\030\046\034\001\002\000\004\014\113\001" +
    "\002\000\004\014\111\001\002\000\004\032\030\001\002" +
    "\000\004\010\uffa3\001\002\000\004\046\034\001\002\000" +
    "\004\010\uffa2\001\002\000\006\035\033\046\034\001\002" +
    "\000\004\014\122\001\002\000\004\014\120\001\002\000" +
    "\004\035\033\001\002\000\004\010\uff9f\001\002\000\004" +
    "\046\034\001\002\000\004\010\uff9e\001\002\000\004\014" +
    "\130\001\002\000\004\014\126\001\002\000\004\007\023" +
    "\001\002\000\004\010\uff9a\001\002\000\012\003\015\015" +
    "\013\037\006\040\016\001\002\000\004\010\uff9c\001\002" +
    "\000\004\010\uff9b\001\002\000\004\010\uff9d\001\002\000" +
    "\004\026\135\001\002\000\006\010\uff97\014\uff97\001\002" +
    "\000\010\010\uffb6\012\uffb6\014\137\001\002\000\004\007" +
    "\023\001\002\000\006\010\uffb7\012\uffb7\001\002\000\010" +
    "\032\030\035\033\036\024\001\002\000\004\014\163\001" +
    "\002\000\004\014\154\001\002\000\004\014\145\001\002" +
    "\000\006\032\030\036\024\001\002\000\004\014\152\001" +
    "\002\000\004\014\150\001\002\000\004\036\024\001\002" +
    "\000\004\010\uffa9\001\002\000\004\032\030\001\002\000" +
    "\004\010\uffad\001\002\000\006\035\033\036\024\001\002" +
    "\000\004\014\161\001\002\000\004\014\157\001\002\000" +
    "\004\036\024\001\002\000\004\010\uffb5\001\002\000\004" +
    "\035\033\001\002\000\004\010\uffb1\001\002\000\006\032" +
    "\030\035\033\001\002\000\004\014\170\001\002\000\004" +
    "\014\166\001\002\000\004\032\030\001\002\000\004\010" +
    "\uffa5\001\002\000\004\035\033\001\002\000\004\010\uffa1" +
    "\001\002\000\010\032\030\036\024\046\034\001\002\000" +
    "\004\014\214\001\002\000\004\014\205\001\002\000\004" +
    "\014\176\001\002\000\006\032\030\036\024\001\002\000" +
    "\004\014\203\001\002\000\004\014\201\001\002\000\004" +
    "\036\024\001\002\000\004\010\uffa8\001\002\000\004\032" +
    "\030\001\002\000\004\010\uffac\001\002\000\006\036\024" +
    "\046\034\001\002\000\004\014\212\001\002\000\004\014" +
    "\210\001\002\000\004\036\024\001\002\000\004\010\uffa7" +
    "\001\002\000\004\046\034\001\002\000\004\010\uffa6\001" +
    "\002\000\006\032\030\046\034\001\002\000\004\014\221" +
    "\001\002\000\004\014\217\001\002\000\004\032\030\001" +
    "\002\000\004\010\uffab\001\002\000\004\046\034\001\002" +
    "\000\004\010\uffaa\001\002\000\004\051\224\001\002\000" +
    "\006\010\uff96\014\uff96\001\002\000\006\010\uffb8\014\uffb8" +
    "\001\002\000\004\011\227\001\002\000\004\007\231\001" +
    "\002\000\004\012\324\001\002\000\012\003\233\041\232" +
    "\042\241\046\237\001\002\000\004\013\314\001\002\000" +
    "\006\010\304\012\303\001\002\000\004\010\300\001\002" +
    "\000\004\014\271\001\002\000\004\014\262\001\002\000" +
    "\004\013\256\001\002\000\004\014\247\001\002\000\004" +
    "\013\242\001\002\000\010\043\246\044\244\045\243\001" +
    "\002\000\006\010\uff57\014\uff57\001\002\000\006\010\uff58" +
    "\014\uff58\001\002\000\006\010\uff5a\014\uff5a\001\002\000" +
    "\006\010\uff59\014\uff59\001\002\000\006\042\241\046\237" +
    "\001\002\000\004\014\254\001\002\000\004\014\252\001" +
    "\002\000\004\046\237\001\002\000\004\010\uff6b\001\002" +
    "\000\004\042\241\001\002\000\004\010\uff6c\001\002\000" +
    "\006\005\261\006\257\001\002\000\006\010\uff5f\014\uff5f" +
    "\001\002\000\006\010\uff61\014\uff61\001\002\000\006\010" +
    "\uff60\014\uff60\001\002\000\006\041\232\046\237\001\002" +
    "\000\004\014\267\001\002\000\004\014\265\001\002\000" +
    "\004\046\237\001\002\000\004\010\uff67\001\002\000\004" +
    "\041\232\001\002\000\004\010\uff68\001\002\000\006\041" +
    "\232\042\241\001\002\000\004\014\276\001\002\000\004" +
    "\014\274\001\002\000\004\042\241\001\002\000\004\010" +
    "\uff6a\001\002\000\004\041\232\001\002\000\004\010\uff69" +
    "\001\002\000\010\010\uff6d\012\uff6d\014\301\001\002\000" +
    "\004\007\231\001\002\000\006\010\uff6e\012\uff6e\001\002" +
    "\000\004\014\307\001\002\000\004\014\305\001\002\000" +
    "\004\007\231\001\002\000\004\010\uff62\001\002\000\012" +
    "\007\231\015\013\034\017\037\006\001\002\000\004\010" +
    "\uff64\001\002\000\004\010\uff63\001\002\000\004\010\uff66" +
    "\001\002\000\004\010\uff65\001\002\000\004\011\315\001" +
    "\002\000\004\005\317\001\002\000\004\012\uff5e\001\002" +
    "\000\006\012\uff5b\014\320\001\002\000\004\005\317\001" +
    "\002\000\004\012\uff5c\001\002\000\004\012\323\001\002" +
    "\000\006\010\uff5d\014\uff5d\001\002\000\006\010\uff70\014" +
    "\uff70\001\002\000\006\010\uff6f\014\uff6f\001\002\000\012" +
    "\003\015\015\013\034\017\040\016\001\002\000\004\014" +
    "\350\001\002\000\004\014\341\001\002\000\004\014\332" +
    "\001\002\000\010\003\015\015\013\040\016\001\002\000" +
    "\004\014\337\001\002\000\004\014\335\001\002\000\006" +
    "\003\015\040\016\001\002\000\004\010\ufff5\001\002\000" +
    "\004\015\013\001\002\000\004\010\ufff4\001\002\000\010" +
    "\003\015\034\017\040\016\001\002\000\004\014\346\001" +
    "\002\000\004\014\344\001\002\000\006\003\015\040\016" +
    "\001\002\000\004\010\ufff6\001\002\000\004\034\017\001" +
    "\002\000\004\010\ufff2\001\002\000\006\015\013\034\017" +
    "\001\002\000\004\014\355\001\002\000\004\014\353\001" +
    "\002\000\004\015\013\001\002\000\004\010\ufff0\001\002" +
    "\000\004\034\017\001\002\000\004\010\ufff1\001\002\000" +
    "\004\007\360\001\002\000\024\003\377\016\365\017\u0102" +
    "\022\372\023\371\024\373\025\366\027\363\033\375\001" +
    "\002\000\006\010\uffe4\014\u015d\001\002\000\006\010\uffe3" +
    "\014\u015b\001\002\000\004\013\u0136\001\002\000\006\010" +
    "\uffe0\014\u0134\001\002\000\004\013\u012f\001\002\000\004" +
    "\013\u012d\001\002\000\004\010\u012c\001\002\000\006\010" +
    "\uffdf\014\u012a\001\002\000\004\013\u0128\001\002\000\004" +
    "\013\u0126\001\002\000\004\013\u0122\001\002\000\006\010" +
    "\uffe5\014\u0120\001\002\000\004\013\u011e\001\002\000\006" +
    "\010\uffe6\014\u011c\001\002\000\014\003\015\014\u0117\034" +
    "\017\037\006\040\016\001\002\000\006\010\uffe2\014\u0115" +
    "\001\002\000\006\010\uffe1\014\u0113\001\002\000\004\013" +
    "\u0103\001\002\000\004\007\u0104\001\002\000\006\020\u0105" +
    "\021\u0109\001\002\000\004\013\u0111\001\002\000\004\014" +
    "\u010f\001\002\000\004\010\u010e\001\002\000\004\014\u010c" +
    "\001\002\000\004\013\u010a\001\002\000\004\026\u010b\001" +
    "\002\000\006\010\uffca\014\uffca\001\002\000\004\021\u0109" +
    "\001\002\000\004\010\uffcd\001\002\000\006\010\uffce\014" +
    "\uffce\001\002\000\004\020\u0105\001\002\000\004\010\uffcc" +
    "\001\002\000\004\026\u0112\001\002\000\006\010\uffcb\014" +
    "\uffcb\001\002\000\024\003\377\016\365\017\u0102\022\372" +
    "\023\371\024\373\025\366\027\363\033\375\001\002\000" +
    "\004\010\uffd9\001\002\000\024\003\377\016\365\017\u0102" +
    "\022\372\023\371\024\373\025\366\027\363\033\375\001" +
    "\002\000\004\010\uffda\001\002\000\024\003\377\016\365" +
    "\017\u0102\022\372\023\371\024\373\025\366\027\363\033" +
    "\375\001\002\000\004\010\uffd5\001\002\000\004\010\uffd4" +
    "\001\002\000\004\010\uffd6\001\002\000\004\010\uffd3\001" +
    "\002\000\024\003\377\016\365\017\u0102\022\372\023\371" +
    "\024\373\025\366\027\363\033\375\001\002\000\004\010" +
    "\uffde\001\002\000\004\026\u011f\001\002\000\006\010\uffb9" +
    "\014\uffb9\001\002\000\024\003\377\016\365\017\u0102\022" +
    "\372\023\371\024\373\025\366\027\363\033\375\001\002" +
    "\000\004\010\uffdd\001\002\000\006\047\u0124\050\u0125\001" +
    "\002\000\006\010\uffbb\014\uffbb\001\002\000\006\010\uffbf" +
    "\014\uffbf\001\002\000\006\010\uffbe\014\uffbe\001\002\000" +
    "\006\047\u0124\050\u0125\001\002\000\006\010\uffbd\014\uffbd" +
    "\001\002\000\004\026\u0129\001\002\000\006\010\uffbc\014" +
    "\uffbc\001\002\000\024\003\377\016\365\017\u0102\022\372" +
    "\023\371\024\373\025\366\027\363\033\375\001\002\000" +
    "\004\010\uffd7\001\002\000\006\010\uffe7\014\uffe7\001\002" +
    "\000\006\047\u0124\050\u0125\001\002\000\006\010\uffba\014" +
    "\uffba\001\002\000\010\004\u0132\005\u0133\006\u0130\001\002" +
    "\000\006\010\uffcf\014\uffcf\001\002\000\006\010\uffd2\014" +
    "\uffd2\001\002\000\006\010\uffd1\014\uffd1\001\002\000\006" +
    "\010\uffd0\014\uffd0\001\002\000\024\003\377\016\365\017" +
    "\u0102\022\372\023\371\024\373\025\366\027\363\033\375" +
    "\001\002\000\004\010\uffd8\001\002\000\004\007\u0137\001" +
    "\002\000\010\030\u013b\031\u013a\032\u0139\001\002\000\004" +
    "\014\u0154\001\002\000\004\013\u0152\001\002\000\004\013" +
    "\u0150\001\002\000\004\013\u014e\001\002\000\004\010\u014d" +
    "\001\002\000\004\014\u0146\001\002\000\004\014\u013f\001" +
    "\002\000\006\030\u013b\031\u013a\001\002\000\004\014\u0144" +
    "\001\002\000\004\014\u0142\001\002\000\004\030\u013b\001" +
    "\002\000\004\010\uffc3\001\002\000\004\031\u013a\001\002" +
    "\000\004\010\uffc4\001\002\000\006\030\u013b\032\u0139\001" +
    "\002\000\004\014\u014b\001\002\000\004\014\u0149\001\002" +
    "\000\004\030\u013b\001\002\000\004\010\uffc5\001\002\000" +
    "\004\032\u0139\001\002\000\004\010\uffc6\001\002\000\006" +
    "\010\uffc9\014\uffc9\001\002\000\006\047\u0124\050\u0125\001" +
    "\002\000\006\010\uffc2\014\uffc2\001\002\000\006\047\u0124" +
    "\050\u0125\001\002\000\006\010\uffc1\014\uffc1\001\002\000" +
    "\004\026\u0153\001\002\000\006\010\uffc0\014\uffc0\001\002" +
    "\000\006\031\u013a\032\u0139\001\002\000\004\014\u0159\001" +
    "\002\000\004\014\u0157\001\002\000\004\031\u013a\001\002" +
    "\000\004\010\uffc7\001\002\000\004\032\u0139\001\002\000" +
    "\004\010\uffc8\001\002\000\024\003\377\016\365\017\u0102" +
    "\022\372\023\371\024\373\025\366\027\363\033\375\001" +
    "\002\000\004\010\uffdb\001\002\000\024\003\377\016\365" +
    "\017\u0102\022\372\023\371\024\373\025\366\027\363\033" +
    "\375\001\002\000\004\010\uffdc\001\002\000\004\002\000" +
    "\001\002\000\012\003\015\015\013\037\006\040\016\001" +
    "\002\000\004\014\u0172\001\002\000\004\014\u016b\001\002" +
    "\000\004\014\u0164\001\002\000\010\003\015\037\006\040" +
    "\016\001\002\000\004\014\u0169\001\002\000\004\014\u0167" +
    "\001\002\000\004\037\006\001\002\000\004\010\ufffa\001" +
    "\002\000\006\003\015\040\016\001\002\000\004\010\ufffe" +
    "\001\002\000\006\015\013\037\006\001\002\000\004\014" +
    "\u0170\001\002\000\004\014\u016e\001\002\000\004\037\006" +
    "\001\002\000\004\010\ufff9\001\002\000\004\015\013\001" +
    "\002\000\004\010\ufff8\001\002\000\010\003\015\015\013" +
    "\040\016\001\002\000\004\014\u0177\001\002\000\004\014" +
    "\u0175\001\002\000\006\003\015\040\016\001\002\000\004" +
    "\010\ufffd\001\002\000\004\015\013\001\002\000\004\010" +
    "\ufffc\001\002\000\010\015\013\034\017\037\006\001\002" +
    "\000\004\014\u018b\001\002\000\004\014\u0184\001\002\000" +
    "\004\014\u017d\001\002\000\006\015\013\037\006\001\002" +
    "\000\004\014\u0182\001\002\000\004\014\u0180\001\002\000" +
    "\004\037\006\001\002\000\004\010\uffed\001\002\000\004" +
    "\015\013\001\002\000\004\010\uffec\001\002\000\006\034" +
    "\017\037\006\001\002\000\004\014\u0189\001\002\000\004" +
    "\014\u0187\001\002\000\004\037\006\001\002\000\004\010" +
    "\uffee\001\002\000\004\034\017\001\002\000\004\010\uffea" +
    "\001\002\000\006\015\013\034\017\001\002\000\004\014" +
    "\u0190\001\002\000\004\014\u018e\001\002\000\004\015\013" +
    "\001\002\000\004\010\uffe8\001\002\000\004\034\017\001" +
    "\002\000\004\010\uffe9\001\002\000\012\003\015\034\017" +
    "\037\006\040\016\001\002\000\004\014\u01a4\001\002\000" +
    "\004\014\u019d\001\002\000\004\014\u0196\001\002\000\010" +
    "\003\015\037\006\040\016\001\002\000\004\014\u019b\001" +
    "\002\000\004\014\u0199\001\002\000\004\037\006\001\002" +
    "\000\004\010\ufffb\001\002\000\006\003\015\040\016\001" +
    "\002\000\004\010\uffff\001\002\000\006\034\017\037\006" +
    "\001\002\000\004\014\u01a2\001\002\000\004\014\u01a0\001" +
    "\002\000\004\037\006\001\002\000\004\010\uffef\001\002" +
    "\000\004\034\017\001\002\000\004\010\uffeb\001\002\000" +
    "\010\003\015\034\017\040\016\001\002\000\004\014\u01a9" +
    "\001\002\000\004\014\u01a7\001\002\000\006\003\015\040" +
    "\016\001\002\000\004\010\ufff7\001\002\000\004\034\017" +
    "\001\002\000\004\010\ufff3\001\002\000\004\011\u01ac\001" +
    "\002\000\004\007\u01ad\001\002\000\014\003\u01b3\032\030" +
    "\035\033\036\024\046\034\001\002\000\004\012\u01af\001" +
    "\002\000\006\010\uff95\014\uff95\001\002\000\004\014\u020c" +
    "\001\002\000\004\014\u01f3\001\002\000\004\010\u01f0\001" +
    "\002\000\006\010\u01e9\012\u01e8\001\002\000\004\014\u01cf" +
    "\001\002\000\004\014\u01b6\001\002\000\010\035\033\036" +
    "\024\046\034\001\002\000\004\014\u01c8\001\002\000\004" +
    "\014\u01c1\001\002\000\004\014\u01ba\001\002\000\006\035" +
    "\033\036\024\001\002\000\004\014\u01bf\001\002\000\004" +
    "\014\u01bd\001\002\000\004\036\024\001\002\000\004\010" +
    "\uff91\001\002\000\004\035\033\001\002\000\004\010\uff8d" +
    "\001\002\000\006\036\024\046\034\001\002\000\004\014" +
    "\u01c6\001\002\000\004\014\u01c4\001\002\000\004\036\024" +
    "\001\002\000\004\010\uff90\001\002\000\004\046\034\001" +
    "\002\000\004\010\uff8f\001\002\000\006\035\033\046\034" +
    "\001\002\000\004\014\u01cd\001\002\000\004\014\u01cb\001" +
    "\002\000\004\035\033\001\002\000\004\010\uff8c\001\002" +
    "\000\004\046\034\001\002\000\004\010\uff8b\001\002\000" +
    "\010\032\030\035\033\046\034\001\002\000\004\014\u01e1" +
    "\001\002\000\004\014\u01da\001\002\000\004\014\u01d3\001" +
    "\002\000\006\032\030\035\033\001\002\000\004\014\u01d8" +
    "\001\002\000\006\010\uff76\014\u01d6\001\002\000\004\032" +
    "\030\001\002\000\004\010\uff81\001\002\000\004\035\033" +
    "\001\002\000\004\010\uff7d\001\002\000\006\032\030\046" +
    "\034\001\002\000\004\014\u01df\001\002\000\006\010\uff75" +
    "\014\u01dd\001\002\000\004\032\030\001\002\000\004\010" +
    "\uff80\001\002\000\004\046\034\001\002\000\004\010\uff7f" +
    "\001\002\000\006\035\033\046\034\001\002\000\004\014" +
    "\u01e6\001\002\000\004\014\u01e4\001\002\000\004\035\033" +
    "\001\002\000\004\010\uff7c\001\002\000\004\046\034\001" +
    "\002\000\004\010\uff7b\001\002\000\004\014\u01ec\001\002" +
    "\000\004\014\u01ea\001\002\000\004\007\u01ad\001\002\000" +
    "\004\010\uff71\001\002\000\012\003\015\015\013\034\017" +
    "\040\016\001\002\000\004\010\uff72\001\002\000\004\010" +
    "\uff74\001\002\000\004\010\uff73\001\002\000\010\010\uff93" +
    "\012\uff93\014\u01f1\001\002\000\004\007\u01ad\001\002\000" +
    "\006\010\uff94\012\uff94\001\002\000\010\032\030\035\033" +
    "\036\024\001\002\000\004\014\u0205\001\002\000\004\014" +
    "\u01fe\001\002\000\004\014\u01f7\001\002\000\006\032\030" +
    "\036\024\001\002\000\006\010\uff7a\014\u01fc\001\002\000" +
    "\004\014\u01fa\001\002\000\004\036\024\001\002\000\004" +
    "\010\uff86\001\002\000\004\032\030\001\002\000\004\010" +
    "\uff8a\001\002\000\006\035\033\036\024\001\002\000\004" +
    "\014\u0203\001\002\000\004\014\u0201\001\002\000\004\036" +
    "\024\001\002\000\004\010\uff92\001\002\000\004\035\033" +
    "\001\002\000\004\010\uff8e\001\002\000\006\032\030\035" +
    "\033\001\002\000\004\014\u020a\001\002\000\006\010\uff79" +
    "\014\u0208\001\002\000\004\032\030\001\002\000\004\010" +
    "\uff82\001\002\000\004\035\033\001\002\000\004\010\uff7e" +
    "\001\002\000\010\032\030\036\024\046\034\001\002\000" +
    "\004\014\u021e\001\002\000\004\014\u0217\001\002\000\004" +
    "\014\u0210\001\002\000\006\032\030\036\024\001\002\000" +
    "\006\010\uff78\014\u0215\001\002\000\004\014\u0213\001\002" +
    "\000\004\036\024\001\002\000\004\010\uff85\001\002\000" +
    "\004\032\030\001\002\000\004\010\uff89\001\002\000\006" +
    "\036\024\046\034\001\002\000\004\014\u021c\001\002\000" +
    "\004\014\u021a\001\002\000\004\036\024\001\002\000\004" +
    "\010\uff84\001\002\000\004\046\034\001\002\000\004\010" +
    "\uff83\001\002\000\006\032\030\046\034\001\002\000\004" +
    "\014\u0223\001\002\000\006\010\uff77\014\u0221\001\002\000" +
    "\004\032\030\001\002\000\004\010\uff88\001\002\000\004" +
    "\046\034\001\002\000\004\010\uff87\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0223\000\004\002\003\001\001\000\002\001\001\000" +
    "\014\003\007\006\010\011\013\014\006\026\011\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\021\001\001\000\002" +
    "\001\001\000\014\010\026\040\025\047\024\050\034\051" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\040\040\047\037\051\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\047\043\051\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\051\045\001\001\000\002\001\001" +
    "\000\004\047\047\001\001\000\002\001\001\000\006\040" +
    "\052\051\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\051\054\001\001\000\002\001\001\000\004\040" +
    "\056\001\001\000\002\001\001\000\006\040\061\047\060" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\047" +
    "\063\001\001\000\002\001\001\000\004\040\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\040\075\047\074" +
    "\050\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\047\100\050\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\050\102\001\001\000" +
    "\002\001\001\000\004\047\104\001\001\000\002\001\001" +
    "\000\006\040\107\050\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\050\111\001\001\000\002\001\001" +
    "\000\004\040\113\001\001\000\002\001\001\000\006\040" +
    "\116\047\115\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\047\120\001\001\000\002\001\001\000\004\040" +
    "\122\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\126\001\001\000\002\001\001\000" +
    "\010\003\131\011\130\014\132\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\137\001\001" +
    "\000\002\001\001\000\010\047\143\050\142\051\141\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\050\146\051\145\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\051\150\001\001\000\002\001\001" +
    "\000\004\050\152\001\001\000\002\001\001\000\006\047" +
    "\155\051\154\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\051\157\001\001\000\002\001\001\000\004\047" +
    "\161\001\001\000\002\001\001\000\006\047\164\050\163" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\050" +
    "\166\001\001\000\002\001\001\000\004\047\170\001\001" +
    "\000\002\001\001\000\010\040\174\050\173\051\172\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\050\177\051\176\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\051\201\001\001\000\002\001\001" +
    "\000\004\050\203\001\001\000\002\001\001\000\006\040" +
    "\206\051\205\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\051\210\001\001\000\002\001\001\000\004\040" +
    "\212\001\001\000\002\001\001\000\006\040\215\050\214" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\050" +
    "\217\001\001\000\002\001\001\000\004\040\221\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\227\001\001" +
    "\000\002\001\001\000\012\004\233\041\234\042\235\043" +
    "\237\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\045\244" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\041\247\042\250\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\041\252\001" +
    "\001\000\002\001\001\000\004\042\254\001\001\000\002" +
    "\001\001\000\004\046\257\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\041\262\043\263" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\041" +
    "\265\001\001\000\002\001\001\000\004\043\267\001\001" +
    "\000\002\001\001\000\006\042\271\043\272\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\042\274\001\001" +
    "\000\002\001\001\000\004\043\276\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\301\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\305\001\001\000\002\001\001\000\012\005\310\006\312" +
    "\011\307\014\311\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\044\315\001\001\000\004\052\321\001\001\000" +
    "\002\001\001\000\004\044\320\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\326\006\330\014\327\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\332\014\333\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\335\001\001\000\002\001\001\000" +
    "\004\014\337\001\001\000\002\001\001\000\006\003\341" +
    "\006\342\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\344\001\001\000\002\001\001\000\004\006\346" +
    "\001\001\000\002\001\001\000\006\006\351\014\350\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\353" +
    "\001\001\000\002\001\001\000\004\006\355\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\015\366\016\375" +
    "\017\373\020\377\021\360\022\361\023\u0100\024\363\025" +
    "\367\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\u0118\006\u0119" +
    "\011\u0117\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\030\u0106\031\u0107" +
    "\032\u0105\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\u010c\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\031\u010f\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\015\u0113\016\375\017\373\020\377\021\360\022\361" +
    "\023\u0100\024\363\025\367\001\001\000\002\001\001\000" +
    "\024\015\u0115\016\375\017\373\020\377\021\360\022\361" +
    "\023\u0100\024\363\025\367\001\001\000\002\001\001\000" +
    "\024\015\u011a\016\375\017\373\020\377\021\360\022\361" +
    "\023\u0100\024\363\025\367\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\015\u011c\016\375\017\373\020\377\021\360\022\361\023" +
    "\u0100\024\363\025\367\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\015\u0120\016\375\017" +
    "\373\020\377\021\360\022\361\023\u0100\024\363\025\367" +
    "\001\001\000\002\001\001\000\004\037\u0122\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\037\u0126\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\015\u012a\016\375\017\373\020\377" +
    "\021\360\022\361\023\u0100\024\363\025\367\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\037\u012d\001\001" +
    "\000\002\001\001\000\004\027\u0130\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\015\u0134\016\375\017\373\020\377\021\360\022" +
    "\361\023\u0100\024\363\025\367\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\033\u013b\034\u0137\035\u013c\036" +
    "\u013d\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\034\u013f\035\u0140\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\034\u0142\001" +
    "\001\000\002\001\001\000\004\035\u0144\001\001\000\002" +
    "\001\001\000\006\034\u0146\036\u0147\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\034\u0149\001\001\000\002" +
    "\001\001\000\004\036\u014b\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\037\u014e\001\001\000\002\001\001" +
    "\000\004\037\u0150\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\035\u0154\036\u0155\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\035\u0157\001" +
    "\001\000\002\001\001\000\004\036\u0159\001\001\000\002" +
    "\001\001\000\024\015\u015b\016\375\017\373\020\377\021" +
    "\360\022\361\023\u0100\024\363\025\367\001\001\000\002" +
    "\001\001\000\024\015\u015d\016\375\017\373\020\377\021" +
    "\360\022\361\023\u0100\024\363\025\367\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\003\u0161\011\u0160\014" +
    "\u0162\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\u0165\011\u0164\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\u0167\001\001\000\002" +
    "\001\001\000\004\003\u0169\001\001\000\002\001\001\000" +
    "\006\011\u016b\014\u016c\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\u016e\001\001\000\002\001\001\000" +
    "\004\014\u0170\001\001\000\002\001\001\000\006\003\u0172" +
    "\014\u0173\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\u0175\001\001\000\002\001\001\000\004\014\u0177" +
    "\001\001\000\002\001\001\000\010\006\u017b\011\u0179\014" +
    "\u017a\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\u017d\014\u017e\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\u0180\001\001\000\002" +
    "\001\001\000\004\014\u0182\001\001\000\002\001\001\000" +
    "\006\006\u0185\011\u0184\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\u0187\001\001\000\002\001\001\000" +
    "\004\006\u0189\001\001\000\002\001\001\000\006\006\u018c" +
    "\014\u018b\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\u018e\001\001\000\002\001\001\000\004\006\u0190" +
    "\001\001\000\002\001\001\000\010\003\u0193\006\u0194\011" +
    "\u0192\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\u0197\011\u0196\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\u0199\001\001\000\002" +
    "\001\001\000\004\003\u019b\001\001\000\002\001\001\000" +
    "\006\006\u019e\011\u019d\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\u01a0\001\001\000\002\001\001\000" +
    "\004\006\u01a2\001\001\000\002\001\001\000\006\003\u01a4" +
    "\006\u01a5\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\u01a7\001\001\000\002\001\001\000\004\006\u01a9" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\u01ad\001\001\000\014\013\u01b1\040\u01b0\047\u01af\050\u01b4" +
    "\051\u01b3\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\040" +
    "\u01b8\047\u01b7\051\u01b6\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\047\u01bb\051\u01ba\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\051\u01bd" +
    "\001\001\000\002\001\001\000\004\047\u01bf\001\001\000" +
    "\002\001\001\000\006\040\u01c2\051\u01c1\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\051\u01c4\001\001\000" +
    "\002\001\001\000\004\040\u01c6\001\001\000\002\001\001" +
    "\000\006\040\u01c9\047\u01c8\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\047\u01cb\001\001\000\002\001\001" +
    "\000\004\040\u01cd\001\001\000\002\001\001\000\010\040" +
    "\u01d1\047\u01d0\050\u01cf\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\047\u01d4\050\u01d3\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\050\u01d6" +
    "\001\001\000\002\001\001\000\004\047\u01d8\001\001\000" +
    "\002\001\001\000\006\040\u01db\050\u01da\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\050\u01dd\001\001\000" +
    "\002\001\001\000\004\040\u01df\001\001\000\002\001\001" +
    "\000\006\040\u01e2\047\u01e1\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\047\u01e4\001\001\000\002\001\001" +
    "\000\004\040\u01e6\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\u01ea\001\001\000\002" +
    "\001\001\000\010\003\u01ec\006\u01ee\014\u01ed\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\u01f1\001\001\000\002\001\001\000" +
    "\010\047\u01f5\050\u01f4\051\u01f3\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\050\u01f8\051" +
    "\u01f7\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\051\u01fa\001\001\000\002\001\001\000\004\050\u01fc\001" +
    "\001\000\002\001\001\000\006\047\u01ff\051\u01fe\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\051\u0201\001" +
    "\001\000\002\001\001\000\004\047\u0203\001\001\000\002" +
    "\001\001\000\006\047\u0206\050\u0205\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\050\u0208\001\001\000\002" +
    "\001\001\000\004\047\u020a\001\001\000\002\001\001\000" +
    "\010\040\u020e\050\u020d\051\u020c\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\050\u0211\051" +
    "\u0210\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\051\u0213\001\001\000\002\001\001\000\004\050\u0215\001" +
    "\001\000\002\001\001\000\006\040\u0218\051\u0217\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\051\u021a\001" +
    "\001\000\002\001\001\000\004\040\u021c\001\001\000\002" +
    "\001\001\000\006\040\u021f\050\u021e\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\050\u0221\001\001\000\002" +
    "\001\001\000\004\040\u0223\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MapConfigFileParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MapConfigFileParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MapConfigFileParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private Konquest konquestFrame;
    private MapConfigFile mapConfigFileDriver;
  
    public MapConfigFileParser(MapConfigFileLexer lexer, Konquest konquestFrame) { 
        super(lexer);
        this.konquestFrame = konquestFrame;
        mapConfigFileDriver = this.konquestFrame.getMapConfigFile();
    }

    public void syntax_error(Symbol s){
        System.out.println("Error " + s);
        konquestFrame.printMapConfigFileSintaxError(s);
    }

    public void unrecovered_syntax_error(Symbol s){
        System.out.println("Error grave " + s);
        konquestFrame.printMapConfigFileSintaxError(s);
    } 



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$MapConfigFileParser$actions {
  private final MapConfigFileParser parser;

  /** Constructor */
  CUP$MapConfigFileParser$actions(MapConfigFileParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$MapConfigFileParser$do_action_part00000000(
    int                        CUP$MapConfigFileParser$act_num,
    java_cup.runtime.lr_parser CUP$MapConfigFileParser$parser,
    java.util.Stack            CUP$MapConfigFileParser$stack,
    int                        CUP$MapConfigFileParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MapConfigFileParser$result;

      /* select the action based on the action number */
      switch (CUP$MapConfigFileParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= konquest EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-1)).value;
		RESULT = start_val;
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-1)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MapConfigFileParser$parser.done_parsing();
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // konquest ::= CURLYBRACKETO konquestRulesSelector CURLYBRACKETC 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("konquest",0, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // konquestRulesSelector ::= map COMMA planets COMMA neutralPlanets COMMA players 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("konquestRulesSelector",20, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // konquestRulesSelector ::= planets COMMA map COMMA neutralPlanets COMMA players 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("konquestRulesSelector",20, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // konquestRulesSelector ::= planets COMMA neutralPlanets COMMA map COMMA players 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("konquestRulesSelector",20, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // konquestRulesSelector ::= planets COMMA neutralPlanets COMMA players COMMA map 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("konquestRulesSelector",20, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // konquestRulesSelector ::= map COMMA planets COMMA players COMMA neutralPlanets 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("konquestRulesSelector",20, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // konquestRulesSelector ::= planets COMMA map COMMA players COMMA neutralPlanets 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("konquestRulesSelector",20, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // konquestRulesSelector ::= planets COMMA players COMMA map COMMA neutralPlanets 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("konquestRulesSelector",20, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // konquestRulesSelector ::= planets COMMA players COMMA neutralPlanets COMMA map 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("konquestRulesSelector",20, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // konquestRulesSelector ::= map COMMA neutralPlanets COMMA planets COMMA players 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("konquestRulesSelector",20, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // konquestRulesSelector ::= neutralPlanets COMMA map COMMA planets COMMA players 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("konquestRulesSelector",20, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // konquestRulesSelector ::= neutralPlanets COMMA planets COMMA map COMMA players 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("konquestRulesSelector",20, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // konquestRulesSelector ::= neutralPlanets COMMA planets COMMA players COMMA map 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("konquestRulesSelector",20, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // konquestRulesSelector ::= map COMMA neutralPlanets COMMA players COMMA planets 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("konquestRulesSelector",20, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // konquestRulesSelector ::= neutralPlanets COMMA map COMMA players COMMA planets 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("konquestRulesSelector",20, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // konquestRulesSelector ::= neutralPlanets COMMA players COMMA map COMMA planets 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("konquestRulesSelector",20, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // konquestRulesSelector ::= neutralPlanets COMMA players COMMA planets COMMA map 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("konquestRulesSelector",20, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // konquestRulesSelector ::= map COMMA players COMMA planets COMMA neutralPlanets 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("konquestRulesSelector",20, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // konquestRulesSelector ::= players COMMA map COMMA planets COMMA neutralPlanets 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("konquestRulesSelector",20, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // konquestRulesSelector ::= players COMMA planets COMMA map COMMA neutralPlanets 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("konquestRulesSelector",20, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // konquestRulesSelector ::= players COMMA planets COMMA neutralPlanets COMMA map 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("konquestRulesSelector",20, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // konquestRulesSelector ::= map COMMA players COMMA neutralPlanets COMMA planets 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("konquestRulesSelector",20, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // konquestRulesSelector ::= players COMMA map COMMA neutralPlanets COMMA planets 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("konquestRulesSelector",20, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // konquestRulesSelector ::= players COMMA neutralPlanets COMMA map COMMA planets 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("konquestRulesSelector",20, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // konquestRulesSelector ::= players COMMA neutralPlanets COMMA planets COMMA map 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("konquestRulesSelector",20, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // map ::= MAP COLON CURLYBRACKETO mapRulesSelector CURLYBRACKETC 
            {
              Object RESULT =null;
		mapConfigFileDriver.createMap();
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("map",10, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // mapRulesSelector ::= id 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("mapRulesSelector",11, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // mapRulesSelector ::= size 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("mapRulesSelector",11, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // mapRulesSelector ::= neutral 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("mapRulesSelector",11, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // mapRulesSelector ::= random 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("mapRulesSelector",11, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // mapRulesSelector ::= neutralPlanetsMap 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("mapRulesSelector",11, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // mapRulesSelector ::= blindMap 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("mapRulesSelector",11, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // mapRulesSelector ::= accumulate 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("mapRulesSelector",11, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // mapRulesSelector ::= completion 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("mapRulesSelector",11, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // mapRulesSelector ::= id COMMA mapRulesSelector 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("mapRulesSelector",11, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // mapRulesSelector ::= size COMMA mapRulesSelector 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("mapRulesSelector",11, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // mapRulesSelector ::= neutral COMMA mapRulesSelector 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("mapRulesSelector",11, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // mapRulesSelector ::= random COMMA mapRulesSelector 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("mapRulesSelector",11, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // mapRulesSelector ::= neutralPlanetsMap COMMA mapRulesSelector 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("mapRulesSelector",11, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // mapRulesSelector ::= blindMap COMMA mapRulesSelector 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("mapRulesSelector",11, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // mapRulesSelector ::= accumulate COMMA mapRulesSelector 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("mapRulesSelector",11, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // mapRulesSelector ::= completion COMMA mapRulesSelector 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("mapRulesSelector",11, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // mapRulesSelector ::= error planets 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-1)).value;
		syntax_error((Symbol)e);
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("mapRulesSelector",11, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-1)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // mapRulesSelector ::= error neutralPlanets 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-1)).value;
		syntax_error((Symbol)e);
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("mapRulesSelector",11, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-1)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // mapRulesSelector ::= error players 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-1)).value;
		syntax_error((Symbol)e);
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("mapRulesSelector",11, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-1)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // mapRulesSelector ::= error COMMA mapRulesSelector 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).value;
		syntax_error((Symbol)e);
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("mapRulesSelector",11, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // id ::= ID COLON mapName 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		mapConfigFileDriver.createMapData("id", name.toString());
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("id",12, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // mapName ::= NAMEID 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		RESULT = name.replace("\"", "");
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("mapName",21, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // mapName ::= NAMEPLANET 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		RESULT = name.replace("\"", "");
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("mapName",21, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // mapName ::= NAMEPLAYER 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		RESULT = name.replace("\"", "");
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("mapName",21, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // size ::= SIZE COLON CURLYBRACKETO sizeRulesSelector CURLYBRACKETC 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("size",13, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // sizeRulesSelector ::= rows COMMA columns 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("sizeRulesSelector",22, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // sizeRulesSelector ::= columns COMMA rows 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("sizeRulesSelector",22, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // rows ::= ROWS COLON INTEGER 
            {
              Object RESULT =null;
		int amountleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int amountright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		String amount = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		mapConfigFileDriver.createMapData("rows", amount.toString());
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("rows",23, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // columns ::= COLUMNS COLON INTEGER 
            {
              Object RESULT =null;
		int amountleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int amountright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		String amount = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		mapConfigFileDriver.createMapData("columns", amount.toString());
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("columns",24, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // neutral ::= NEUTRAL COLON CURLYBRACKETO neutralRulesSelector CURLYBRACKETC 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("neutral",15, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // neutralRulesSelector ::= showSpaceShips COMMA showStatistics COMMA production 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("neutralRulesSelector",25, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // neutralRulesSelector ::= showSpaceShips COMMA production COMMA showStatistics 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("neutralRulesSelector",25, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // neutralRulesSelector ::= showStatistics COMMA showSpaceShips COMMA production 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("neutralRulesSelector",25, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // neutralRulesSelector ::= showStatistics COMMA production COMMA showSpaceShips 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("neutralRulesSelector",25, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // neutralRulesSelector ::= production COMMA showSpaceShips COMMA showStatistics 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("neutralRulesSelector",25, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // neutralRulesSelector ::= production COMMA showStatistics COMMA showSpaceShips 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("neutralRulesSelector",25, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // showSpaceShips ::= SHOWSPACESHIPS COLON boolean 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		mapConfigFileDriver.createMapData("showSpaceShips", value.toString());
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("showSpaceShips",26, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // showStatistics ::= SHOWSTATISTICS COLON boolean 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		mapConfigFileDriver.createMapData("showStatistics", value.toString());
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("showStatistics",27, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // production ::= PRODUCTION COLON INTEGER 
            {
              Object RESULT =null;
		int amountleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int amountright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		String amount = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		mapConfigFileDriver.createMapData("production", amount.toString());
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("production",28, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // boolean ::= TRUE 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		RESULT = value;
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("boolean",29, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // boolean ::= FALSE 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		RESULT = value;
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("boolean",29, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // random ::= RANDOM COLON boolean 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		mapConfigFileDriver.createMapData("random", value.toString());
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("random",16, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // neutralPlanetsMap ::= NEUTRALP COLON INTEGER 
            {
              Object RESULT =null;
		int amountleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int amountright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		String amount = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		mapConfigFileDriver.createMapData("neutralPlanets", amount.toString());
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("neutralPlanetsMap",14, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // blindMap ::= BLIND COLON boolean 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		mapConfigFileDriver.createMapData("blindMap", value.toString());
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("blindMap",17, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // accumulate ::= ACCUMULATE COLON boolean 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		mapConfigFileDriver.createMapData("accumulate", value.toString());
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("accumulate",18, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // completion ::= COMPLETION COLON INTEGER 
            {
              Object RESULT =null;
		int amountleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int amountright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		String amount = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		mapConfigFileDriver.createMapData("completion", amount.toString());
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("completion",19, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // planets ::= PLANETS COLON SQUAREBRACKETO planetsDescription SQUAREBRACKETC 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("planets",4, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // planetsDescription ::= CURLYBRACKETO planetRulesSelector CURLYBRACKETC COMMA planetsDescription 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("planetsDescription",5, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // planetsDescription ::= CURLYBRACKETO planetRulesSelector CURLYBRACKETC 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("planetsDescription",5, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // planetRulesSelector ::= planetName COMMA planetProduction COMMA planetSpaceShips COMMA planetDeathRate 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).value;
		int productionleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).left;
		int productionright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).right;
		Integer production = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).value;
		int shipsleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).left;
		int shipsright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).right;
		Integer ships = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).value;
		int deathRateleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int deathRateright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		Double deathRate = (Double)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		mapConfigFileDriver.createPlanet(name, ships, production, deathRate, false, false);
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("planetRulesSelector",6, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // planetRulesSelector ::= planetProduction COMMA planetName COMMA planetSpaceShips COMMA planetDeathRate 
            {
              Object RESULT =null;
		int productionleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).left;
		int productionright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).right;
		Integer production = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).value;
		int shipsleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).left;
		int shipsright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).right;
		Integer ships = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).value;
		int deathRateleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int deathRateright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		Double deathRate = (Double)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		mapConfigFileDriver.createPlanet(name, ships, production, deathRate, false, false);
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("planetRulesSelector",6, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // planetRulesSelector ::= planetProduction COMMA planetSpaceShips COMMA planetName COMMA planetDeathRate 
            {
              Object RESULT =null;
		int productionleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).left;
		int productionright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).right;
		Integer production = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).value;
		int shipsleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).left;
		int shipsright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).right;
		Integer ships = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).value;
		int deathRateleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int deathRateright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		Double deathRate = (Double)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		mapConfigFileDriver.createPlanet(name, ships, production, deathRate, false, false);
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("planetRulesSelector",6, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // planetRulesSelector ::= planetProduction COMMA planetSpaceShips COMMA planetDeathRate COMMA planetName 
            {
              Object RESULT =null;
		int productionleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).left;
		int productionright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).right;
		Integer production = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).value;
		int shipsleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).left;
		int shipsright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).right;
		Integer ships = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).value;
		int deathRateleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).left;
		int deathRateright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).right;
		Double deathRate = (Double)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		mapConfigFileDriver.createPlanet(name, ships, production, deathRate, false, false);
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("planetRulesSelector",6, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // planetRulesSelector ::= planetName COMMA planetProduction COMMA planetDeathRate COMMA planetSpaceShips 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).value;
		int productionleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).left;
		int productionright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).right;
		Integer production = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).value;
		int deathRateleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).left;
		int deathRateright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).right;
		Double deathRate = (Double)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).value;
		int shipsleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int shipsright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		Integer ships = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		mapConfigFileDriver.createPlanet(name, ships, production, deathRate, false, false);
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("planetRulesSelector",6, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // planetRulesSelector ::= planetProduction COMMA planetName COMMA planetDeathRate COMMA planetSpaceShips 
            {
              Object RESULT =null;
		int productionleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).left;
		int productionright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).right;
		Integer production = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).value;
		int deathRateleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).left;
		int deathRateright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).right;
		Double deathRate = (Double)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).value;
		int shipsleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int shipsright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		Integer ships = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		mapConfigFileDriver.createPlanet(name, ships, production, deathRate, false, false);
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("planetRulesSelector",6, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // planetRulesSelector ::= planetProduction COMMA planetDeathRate COMMA planetName COMMA planetSpaceShips 
            {
              Object RESULT =null;
		int productionleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).left;
		int productionright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).right;
		Integer production = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).value;
		int deathRateleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).left;
		int deathRateright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).right;
		Double deathRate = (Double)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).value;
		int shipsleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int shipsright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		Integer ships = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		mapConfigFileDriver.createPlanet(name, ships, production, deathRate, false, false);
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("planetRulesSelector",6, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // planetRulesSelector ::= planetProduction COMMA planetDeathRate COMMA planetSpaceShips COMMA planetName 
            {
              Object RESULT =null;
		int productionleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).left;
		int productionright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).right;
		Integer production = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).value;
		int deathRateleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).left;
		int deathRateright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).right;
		Double deathRate = (Double)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).value;
		int shipsleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).left;
		int shipsright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).right;
		Integer ships = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		mapConfigFileDriver.createPlanet(name, ships, production, deathRate, false, false);
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("planetRulesSelector",6, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // planetRulesSelector ::= planetName COMMA planetSpaceShips COMMA planetDeathRate COMMA planetProduction 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).value;
		int shipsleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).left;
		int shipsright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).right;
		Integer ships = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).value;
		int deathRateleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).left;
		int deathRateright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).right;
		Double deathRate = (Double)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).value;
		int productionleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int productionright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		Integer production = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		mapConfigFileDriver.createPlanet(name, ships, production, deathRate, false, false);
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("planetRulesSelector",6, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // planetRulesSelector ::= planetSpaceShips COMMA planetName COMMA planetDeathRate COMMA planetProduction 
            {
              Object RESULT =null;
		int shipsleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).left;
		int shipsright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).right;
		Integer ships = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).value;
		int deathRateleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).left;
		int deathRateright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).right;
		Double deathRate = (Double)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).value;
		int productionleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int productionright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		Integer production = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		mapConfigFileDriver.createPlanet(name, ships, production, deathRate, false, false);
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("planetRulesSelector",6, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // planetRulesSelector ::= planetSpaceShips COMMA planetDeathRate COMMA planetName COMMA planetProduction 
            {
              Object RESULT =null;
		int shipsleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).left;
		int shipsright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).right;
		Integer ships = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).value;
		int deathRateleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).left;
		int deathRateright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).right;
		Double deathRate = (Double)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).value;
		int productionleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int productionright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		Integer production = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		mapConfigFileDriver.createPlanet(name, ships, production, deathRate, false, false);
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("planetRulesSelector",6, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // planetRulesSelector ::= planetSpaceShips COMMA planetDeathRate COMMA planetProduction COMMA planetName 
            {
              Object RESULT =null;
		int shipsleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).left;
		int shipsright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).right;
		Integer ships = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).value;
		int deathRateleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).left;
		int deathRateright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).right;
		Double deathRate = (Double)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).value;
		int productionleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).left;
		int productionright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).right;
		Integer production = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		mapConfigFileDriver.createPlanet(name, ships, production, deathRate, false, false);
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("planetRulesSelector",6, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // planetRulesSelector ::= planetName COMMA planetSpaceShips COMMA planetProduction COMMA planetDeathRate 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).value;
		int shipsleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).left;
		int shipsright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).right;
		Integer ships = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).value;
		int productionleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).left;
		int productionright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).right;
		Integer production = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).value;
		int deathRateleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int deathRateright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		Double deathRate = (Double)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		mapConfigFileDriver.createPlanet(name, ships, production, deathRate, false, false);
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("planetRulesSelector",6, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // planetRulesSelector ::= planetSpaceShips COMMA planetName COMMA planetProduction COMMA planetDeathRate 
            {
              Object RESULT =null;
		int shipsleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).left;
		int shipsright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).right;
		Integer ships = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).value;
		int productionleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).left;
		int productionright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).right;
		Integer production = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).value;
		int deathRateleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int deathRateright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		Double deathRate = (Double)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		mapConfigFileDriver.createPlanet(name, ships, production, deathRate, false, false);
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("planetRulesSelector",6, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // planetRulesSelector ::= planetSpaceShips COMMA planetProduction COMMA planetName COMMA planetDeathRate 
            {
              Object RESULT =null;
		int shipsleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).left;
		int shipsright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).right;
		Integer ships = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).value;
		int productionleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).left;
		int productionright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).right;
		Integer production = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).value;
		int deathRateleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int deathRateright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		Double deathRate = (Double)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		mapConfigFileDriver.createPlanet(name, ships, production, deathRate, false, false);
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("planetRulesSelector",6, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // planetRulesSelector ::= planetSpaceShips COMMA planetProduction COMMA planetDeathRate COMMA planetName 
            {
              Object RESULT =null;
		int shipsleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).left;
		int shipsright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).right;
		Integer ships = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).value;
		int productionleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).left;
		int productionright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).right;
		Integer production = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).value;
		int deathRateleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).left;
		int deathRateright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).right;
		Double deathRate = (Double)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		mapConfigFileDriver.createPlanet(name, ships, production, deathRate, false, false);
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("planetRulesSelector",6, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // planetRulesSelector ::= planetName COMMA planetDeathRate COMMA planetSpaceShips COMMA planetProduction 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).value;
		int deathRateleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).left;
		int deathRateright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).right;
		Double deathRate = (Double)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).value;
		int shipsleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).left;
		int shipsright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).right;
		Integer ships = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).value;
		int productionleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int productionright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		Integer production = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		mapConfigFileDriver.createPlanet(name, ships, production, deathRate, false, false);
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("planetRulesSelector",6, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // planetRulesSelector ::= planetDeathRate COMMA planetName COMMA planetSpaceShips COMMA planetProduction 
            {
              Object RESULT =null;
		int deathRateleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).left;
		int deathRateright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).right;
		Double deathRate = (Double)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).value;
		int shipsleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).left;
		int shipsright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).right;
		Integer ships = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).value;
		int productionleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int productionright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		Integer production = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		mapConfigFileDriver.createPlanet(name, ships, production, deathRate, false, false);
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("planetRulesSelector",6, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // planetRulesSelector ::= planetDeathRate COMMA planetSpaceShips COMMA planetName COMMA planetProduction 
            {
              Object RESULT =null;
		int deathRateleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).left;
		int deathRateright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).right;
		Double deathRate = (Double)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).value;
		int shipsleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).left;
		int shipsright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).right;
		Integer ships = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).value;
		int productionleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int productionright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		Integer production = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		mapConfigFileDriver.createPlanet(name, ships, production, deathRate, false, false);
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("planetRulesSelector",6, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // planetRulesSelector ::= planetDeathRate COMMA planetSpaceShips COMMA planetProduction COMMA planetName 
            {
              Object RESULT =null;
		int deathRateleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).left;
		int deathRateright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).right;
		Double deathRate = (Double)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).value;
		int shipsleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).left;
		int shipsright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).right;
		Integer ships = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).value;
		int productionleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).left;
		int productionright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).right;
		Integer production = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		mapConfigFileDriver.createPlanet(name, ships, production, deathRate, false, false);
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("planetRulesSelector",6, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // planetRulesSelector ::= planetName COMMA planetDeathRate COMMA planetProduction COMMA planetSpaceShips 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).value;
		int deathRateleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).left;
		int deathRateright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).right;
		Double deathRate = (Double)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).value;
		int productionleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).left;
		int productionright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).right;
		Integer production = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).value;
		int shipsleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int shipsright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		Integer ships = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		mapConfigFileDriver.createPlanet(name, ships, production, deathRate, false, false);
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("planetRulesSelector",6, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // planetRulesSelector ::= planetDeathRate COMMA planetName COMMA planetProduction COMMA planetSpaceShips 
            {
              Object RESULT =null;
		int deathRateleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).left;
		int deathRateright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).right;
		Double deathRate = (Double)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).value;
		int productionleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).left;
		int productionright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).right;
		Integer production = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).value;
		int shipsleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int shipsright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		Integer ships = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		mapConfigFileDriver.createPlanet(name, ships, production, deathRate, false, false);
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("planetRulesSelector",6, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // planetRulesSelector ::= planetDeathRate COMMA planetProduction COMMA planetName COMMA planetSpaceShips 
            {
              Object RESULT =null;
		int deathRateleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).left;
		int deathRateright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).right;
		Double deathRate = (Double)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).value;
		int productionleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).left;
		int productionright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).right;
		Integer production = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).value;
		int shipsleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int shipsright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		Integer ships = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		mapConfigFileDriver.createPlanet(name, ships, production, deathRate, false, false);
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("planetRulesSelector",6, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // planetRulesSelector ::= planetDeathRate COMMA planetProduction COMMA planetSpaceShips COMMA planetName 
            {
              Object RESULT =null;
		int deathRateleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).left;
		int deathRateright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).right;
		Double deathRate = (Double)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).value;
		int productionleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).left;
		int productionright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).right;
		Integer production = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).value;
		int shipsleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).left;
		int shipsright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).right;
		Integer ships = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		mapConfigFileDriver.createPlanet(name, ships, production, deathRate, false, false);
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("planetRulesSelector",6, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // planetRulesSelector ::= error SQUAREBRACKETC COMMA map 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-3)).value;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("planetRulesSelector",6, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-3)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // planetRulesSelector ::= error SQUAREBRACKETC COMMA neutralPlanets 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-3)).value;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("planetRulesSelector",6, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-3)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // planetRulesSelector ::= error SQUAREBRACKETC COMMA players 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-3)).value;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("planetRulesSelector",6, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-3)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // planetRulesSelector ::= error CURLYBRACKETC COMMA planetsDescription 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-3)).value;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("planetRulesSelector",6, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-3)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // planetName ::= NAME COLON NAMEPLANET 
            {
              String RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		RESULT = name.replace("\"", "");
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("planetName",30, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // planetSpaceShips ::= SPACESHIPS COLON INTEGER 
            {
              Integer RESULT =null;
		int amountleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int amountright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		String amount = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		RESULT = Integer.parseInt(amount);
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("planetSpaceShips",37, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // planetProduction ::= PRODUCTION COLON INTEGER 
            {
              Integer RESULT =null;
		int amountleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int amountright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		String amount = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		RESULT = Integer.parseInt(amount);
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("planetProduction",38, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // planetDeathRate ::= DEATHRATE COLON DOUBLE 
            {
              Double RESULT =null;
		int amountleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int amountright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		String amount = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		RESULT = Double.parseDouble(amount);
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("planetDeathRate",39, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // neutralPlanets ::= NEUTRALPLANETS COLON SQUAREBRACKETO neutralPlanetsDescription SQUAREBRACKETC 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("neutralPlanets",7, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // neutralPlanetsDescription ::= CURLYBRACKETO neutralPlanetRulesSelector CURLYBRACKETC COMMA neutralPlanetsDescription 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("neutralPlanetsDescription",8, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // neutralPlanetsDescription ::= CURLYBRACKETO neutralPlanetRulesSelector CURLYBRACKETC 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("neutralPlanetsDescription",8, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // neutralPlanetRulesSelector ::= planetName COMMA planetProduction COMMA planetSpaceShips COMMA planetDeathRate 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).value;
		int productionleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).left;
		int productionright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).right;
		Integer production = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).value;
		int shipsleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).left;
		int shipsright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).right;
		Integer ships = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).value;
		int deathRateleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int deathRateright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		Double deathRate = (Double)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		mapConfigFileDriver.createPlanet(name, ships, production, deathRate, true, false);
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("neutralPlanetRulesSelector",9, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // neutralPlanetRulesSelector ::= planetProduction COMMA planetName COMMA planetSpaceShips COMMA planetDeathRate 
            {
              Object RESULT =null;
		int productionleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).left;
		int productionright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).right;
		Integer production = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).value;
		int shipsleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).left;
		int shipsright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).right;
		Integer ships = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).value;
		int deathRateleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int deathRateright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		Double deathRate = (Double)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		mapConfigFileDriver.createPlanet(name, ships, production, deathRate, true, false);
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("neutralPlanetRulesSelector",9, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // neutralPlanetRulesSelector ::= planetProduction COMMA planetSpaceShips COMMA planetName COMMA planetDeathRate 
            {
              Object RESULT =null;
		int productionleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).left;
		int productionright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).right;
		Integer production = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).value;
		int shipsleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).left;
		int shipsright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).right;
		Integer ships = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).value;
		int deathRateleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int deathRateright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		Double deathRate = (Double)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		mapConfigFileDriver.createPlanet(name, ships, production, deathRate, true, false);
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("neutralPlanetRulesSelector",9, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // neutralPlanetRulesSelector ::= planetProduction COMMA planetSpaceShips COMMA planetDeathRate COMMA planetName 
            {
              Object RESULT =null;
		int productionleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).left;
		int productionright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).right;
		Integer production = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).value;
		int shipsleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).left;
		int shipsright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).right;
		Integer ships = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).value;
		int deathRateleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).left;
		int deathRateright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).right;
		Double deathRate = (Double)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		mapConfigFileDriver.createPlanet(name, ships, production, deathRate, true, false);
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("neutralPlanetRulesSelector",9, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // neutralPlanetRulesSelector ::= planetName COMMA planetProduction COMMA planetDeathRate COMMA planetSpaceShips 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).value;
		int productionleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).left;
		int productionright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).right;
		Integer production = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).value;
		int deathRateleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).left;
		int deathRateright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).right;
		Double deathRate = (Double)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).value;
		int shipsleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int shipsright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		Integer ships = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		mapConfigFileDriver.createPlanet(name, ships, production, deathRate, true, false);
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("neutralPlanetRulesSelector",9, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // neutralPlanetRulesSelector ::= planetProduction COMMA planetName COMMA planetDeathRate COMMA planetSpaceShips 
            {
              Object RESULT =null;
		int productionleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).left;
		int productionright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).right;
		Integer production = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).value;
		int deathRateleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).left;
		int deathRateright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).right;
		Double deathRate = (Double)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).value;
		int shipsleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int shipsright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		Integer ships = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		mapConfigFileDriver.createPlanet(name, ships, production, deathRate, true, false);
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("neutralPlanetRulesSelector",9, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // neutralPlanetRulesSelector ::= planetProduction COMMA planetDeathRate COMMA planetName COMMA planetSpaceShips 
            {
              Object RESULT =null;
		int productionleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).left;
		int productionright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).right;
		Integer production = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).value;
		int deathRateleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).left;
		int deathRateright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).right;
		Double deathRate = (Double)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).value;
		int shipsleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int shipsright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		Integer ships = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		mapConfigFileDriver.createPlanet(name, ships, production, deathRate, true, false);
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("neutralPlanetRulesSelector",9, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // neutralPlanetRulesSelector ::= planetProduction COMMA planetDeathRate COMMA planetSpaceShips COMMA planetName 
            {
              Object RESULT =null;
		int productionleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).left;
		int productionright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).right;
		Integer production = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).value;
		int deathRateleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).left;
		int deathRateright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).right;
		Double deathRate = (Double)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).value;
		int shipsleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).left;
		int shipsright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).right;
		Integer ships = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		mapConfigFileDriver.createPlanet(name, ships, production, deathRate, true, false);
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("neutralPlanetRulesSelector",9, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // neutralPlanetRulesSelector ::= planetName COMMA planetSpaceShips COMMA planetDeathRate COMMA planetProduction 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).value;
		int shipsleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).left;
		int shipsright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).right;
		Integer ships = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).value;
		int deathRateleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).left;
		int deathRateright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).right;
		Double deathRate = (Double)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).value;
		int productionleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int productionright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		Integer production = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		mapConfigFileDriver.createPlanet(name, ships, production, deathRate, true, false);
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("neutralPlanetRulesSelector",9, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // neutralPlanetRulesSelector ::= planetSpaceShips COMMA planetName COMMA planetDeathRate COMMA planetProduction 
            {
              Object RESULT =null;
		int shipsleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).left;
		int shipsright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).right;
		Integer ships = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).value;
		int deathRateleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).left;
		int deathRateright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).right;
		Double deathRate = (Double)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).value;
		int productionleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int productionright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		Integer production = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		mapConfigFileDriver.createPlanet(name, ships, production, deathRate, true, false);
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("neutralPlanetRulesSelector",9, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // neutralPlanetRulesSelector ::= planetSpaceShips COMMA planetDeathRate COMMA planetName COMMA planetProduction 
            {
              Object RESULT =null;
		int shipsleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).left;
		int shipsright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).right;
		Integer ships = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).value;
		int deathRateleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).left;
		int deathRateright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).right;
		Double deathRate = (Double)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).value;
		int productionleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int productionright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		Integer production = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		mapConfigFileDriver.createPlanet(name, ships, production, deathRate, true, false);
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("neutralPlanetRulesSelector",9, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // neutralPlanetRulesSelector ::= planetSpaceShips COMMA planetDeathRate COMMA planetProduction COMMA planetName 
            {
              Object RESULT =null;
		int shipsleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).left;
		int shipsright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).right;
		Integer ships = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).value;
		int deathRateleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).left;
		int deathRateright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).right;
		Double deathRate = (Double)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).value;
		int productionleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).left;
		int productionright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).right;
		Integer production = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		mapConfigFileDriver.createPlanet(name, ships, production, deathRate, true, false);
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("neutralPlanetRulesSelector",9, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // neutralPlanetRulesSelector ::= planetName COMMA planetSpaceShips COMMA planetProduction COMMA planetDeathRate 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).value;
		int shipsleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).left;
		int shipsright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).right;
		Integer ships = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).value;
		int productionleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).left;
		int productionright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).right;
		Integer production = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).value;
		int deathRateleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int deathRateright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		Double deathRate = (Double)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		mapConfigFileDriver.createPlanet(name, ships, production, deathRate, true, false);
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("neutralPlanetRulesSelector",9, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // neutralPlanetRulesSelector ::= planetSpaceShips COMMA planetName COMMA planetProduction COMMA planetDeathRate 
            {
              Object RESULT =null;
		int shipsleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).left;
		int shipsright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).right;
		Integer ships = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).value;
		int productionleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).left;
		int productionright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).right;
		Integer production = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).value;
		int deathRateleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int deathRateright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		Double deathRate = (Double)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		mapConfigFileDriver.createPlanet(name, ships, production, deathRate, true, false);
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("neutralPlanetRulesSelector",9, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // neutralPlanetRulesSelector ::= planetSpaceShips COMMA planetProduction COMMA planetName COMMA planetDeathRate 
            {
              Object RESULT =null;
		int shipsleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).left;
		int shipsright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).right;
		Integer ships = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).value;
		int productionleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).left;
		int productionright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).right;
		Integer production = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).value;
		int deathRateleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int deathRateright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		Double deathRate = (Double)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		mapConfigFileDriver.createPlanet(name, ships, production, deathRate, true, false);
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("neutralPlanetRulesSelector",9, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // neutralPlanetRulesSelector ::= planetSpaceShips COMMA planetProduction COMMA planetDeathRate COMMA planetName 
            {
              Object RESULT =null;
		int shipsleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).left;
		int shipsright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).right;
		Integer ships = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).value;
		int productionleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).left;
		int productionright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).right;
		Integer production = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).value;
		int deathRateleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).left;
		int deathRateright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).right;
		Double deathRate = (Double)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		mapConfigFileDriver.createPlanet(name, ships, production, deathRate, true, false);
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("neutralPlanetRulesSelector",9, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // neutralPlanetRulesSelector ::= planetName COMMA planetDeathRate COMMA planetSpaceShips COMMA planetProduction 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).value;
		int deathRateleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).left;
		int deathRateright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).right;
		Double deathRate = (Double)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).value;
		int shipsleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).left;
		int shipsright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).right;
		Integer ships = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).value;
		int productionleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int productionright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		Integer production = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		mapConfigFileDriver.createPlanet(name, ships, production, deathRate, true, false);
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("neutralPlanetRulesSelector",9, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // neutralPlanetRulesSelector ::= planetDeathRate COMMA planetName COMMA planetSpaceShips COMMA planetProduction 
            {
              Object RESULT =null;
		int deathRateleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).left;
		int deathRateright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).right;
		Double deathRate = (Double)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).value;
		int shipsleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).left;
		int shipsright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).right;
		Integer ships = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).value;
		int productionleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int productionright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		Integer production = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		mapConfigFileDriver.createPlanet(name, ships, production, deathRate, true, false);
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("neutralPlanetRulesSelector",9, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // neutralPlanetRulesSelector ::= planetDeathRate COMMA planetSpaceShips COMMA planetName COMMA planetProduction 
            {
              Object RESULT =null;
		int deathRateleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).left;
		int deathRateright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).right;
		Double deathRate = (Double)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).value;
		int shipsleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).left;
		int shipsright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).right;
		Integer ships = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).value;
		int productionleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int productionright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		Integer production = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		mapConfigFileDriver.createPlanet(name, ships, production, deathRate, true, false);
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("neutralPlanetRulesSelector",9, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // neutralPlanetRulesSelector ::= planetDeathRate COMMA planetSpaceShips COMMA planetProduction COMMA planetName 
            {
              Object RESULT =null;
		int deathRateleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).left;
		int deathRateright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).right;
		Double deathRate = (Double)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).value;
		int shipsleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).left;
		int shipsright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).right;
		Integer ships = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).value;
		int productionleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).left;
		int productionright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).right;
		Integer production = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		mapConfigFileDriver.createPlanet(name, ships, production, deathRate, true, false);
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("neutralPlanetRulesSelector",9, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // neutralPlanetRulesSelector ::= planetName COMMA planetDeathRate COMMA planetProduction COMMA planetSpaceShips 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).value;
		int deathRateleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).left;
		int deathRateright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).right;
		Double deathRate = (Double)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).value;
		int productionleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).left;
		int productionright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).right;
		Integer production = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).value;
		int shipsleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int shipsright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		Integer ships = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		mapConfigFileDriver.createPlanet(name, ships, production, deathRate, true, false);
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("neutralPlanetRulesSelector",9, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // neutralPlanetRulesSelector ::= planetDeathRate COMMA planetName COMMA planetProduction COMMA planetSpaceShips 
            {
              Object RESULT =null;
		int deathRateleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).left;
		int deathRateright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).right;
		Double deathRate = (Double)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).value;
		int productionleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).left;
		int productionright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).right;
		Integer production = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).value;
		int shipsleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int shipsright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		Integer ships = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		mapConfigFileDriver.createPlanet(name, ships, production, deathRate, true, false);
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("neutralPlanetRulesSelector",9, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // neutralPlanetRulesSelector ::= planetDeathRate COMMA planetProduction COMMA planetName COMMA planetSpaceShips 
            {
              Object RESULT =null;
		int deathRateleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).left;
		int deathRateright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).right;
		Double deathRate = (Double)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).value;
		int productionleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).left;
		int productionright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).right;
		Integer production = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).value;
		int shipsleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int shipsright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		Integer ships = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		mapConfigFileDriver.createPlanet(name, ships, production, deathRate, true, false);
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("neutralPlanetRulesSelector",9, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // neutralPlanetRulesSelector ::= planetDeathRate COMMA planetProduction COMMA planetSpaceShips COMMA planetName 
            {
              Object RESULT =null;
		int deathRateleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).left;
		int deathRateright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).right;
		Double deathRate = (Double)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)).value;
		int productionleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).left;
		int productionright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).right;
		Integer production = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).value;
		int shipsleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).left;
		int shipsright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).right;
		Integer ships = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		mapConfigFileDriver.createPlanet(name, ships, production, deathRate, true, false);
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("neutralPlanetRulesSelector",9, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // neutralPlanetRulesSelector ::= planetName COMMA planetSpaceShips COMMA planetDeathRate 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).value;
		int shipsleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).left;
		int shipsright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).right;
		Integer ships = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).value;
		int deathRateleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int deathRateright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		Double deathRate = (Double)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		mapConfigFileDriver.createPlanet(name, ships, -1, deathRate, true, true);
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("neutralPlanetRulesSelector",9, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // neutralPlanetRulesSelector ::= planetName COMMA planetDeathRate COMMA planetSpaceShips 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).value;
		int deathRateleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).left;
		int deathRateright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).right;
		Double deathRate = (Double)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).value;
		int shipsleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int shipsright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		Integer ships = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		mapConfigFileDriver.createPlanet(name, ships, -1, deathRate, true, true);
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("neutralPlanetRulesSelector",9, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // neutralPlanetRulesSelector ::= planetSpaceShips COMMA planetName COMMA planetDeathRate 
            {
              Object RESULT =null;
		int shipsleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).left;
		int shipsright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).right;
		Integer ships = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).value;
		int deathRateleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int deathRateright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		Double deathRate = (Double)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		mapConfigFileDriver.createPlanet(name, ships, -1, deathRate, true, true);
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("neutralPlanetRulesSelector",9, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // neutralPlanetRulesSelector ::= planetSpaceShips COMMA planetDeathRate COMMA planetName 
            {
              Object RESULT =null;
		int shipsleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).left;
		int shipsright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).right;
		Integer ships = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).value;
		int deathRateleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).left;
		int deathRateright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).right;
		Double deathRate = (Double)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		mapConfigFileDriver.createPlanet(name, ships, -1, deathRate, true, true);
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("neutralPlanetRulesSelector",9, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // neutralPlanetRulesSelector ::= planetDeathRate COMMA planetName COMMA planetSpaceShips 
            {
              Object RESULT =null;
		int deathRateleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).left;
		int deathRateright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).right;
		Double deathRate = (Double)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).value;
		int shipsleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int shipsright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		Integer ships = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		mapConfigFileDriver.createPlanet(name, ships, -1, deathRate, true, true);
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("neutralPlanetRulesSelector",9, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // neutralPlanetRulesSelector ::= planetDeathRate COMMA planetSpaceShips COMMA planetName 
            {
              Object RESULT =null;
		int deathRateleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).left;
		int deathRateright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).right;
		Double deathRate = (Double)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).value;
		int shipsleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).left;
		int shipsright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).right;
		Integer ships = (Integer)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		mapConfigFileDriver.createPlanet(name, ships, -1, deathRate, true, true);
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("neutralPlanetRulesSelector",9, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // neutralPlanetRulesSelector ::= error SQUAREBRACKETC COMMA map 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-3)).value;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("neutralPlanetRulesSelector",9, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-3)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // neutralPlanetRulesSelector ::= error SQUAREBRACKETC COMMA planets 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-3)).value;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("neutralPlanetRulesSelector",9, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-3)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // neutralPlanetRulesSelector ::= error SQUAREBRACKETC COMMA players 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-3)).value;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("neutralPlanetRulesSelector",9, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-3)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // neutralPlanetRulesSelector ::= error CURLYBRACKETC COMMA neutralPlanetsDescription 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-3)).value;
		syntax_error((Symbol)e);
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("neutralPlanetRulesSelector",9, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-3)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // players ::= PLAYERS COLON SQUAREBRACKETO playersDescription SQUAREBRACKETC 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("players",1, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // players ::= error COMMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-1)).value;
		syntax_error((Symbol)e);
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("players",1, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-1)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // playersDescription ::= CURLYBRACKETO playerRulesSelector CURLYBRACKETC COMMA playersDescription 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("playersDescription",3, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // playersDescription ::= CURLYBRACKETO playerRulesSelector CURLYBRACKETC 
            {
              Object RESULT =null;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("playersDescription",3, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // playerRulesSelector ::= playerPlanets COMMA playerName COMMA playerType 
            {
              Object RESULT =null;
		int planetsleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).left;
		int planetsright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).right;
		String planets = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		mapConfigFileDriver.createPlayer(name, planets, type);
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("playerRulesSelector",2, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // playerRulesSelector ::= playerPlanets COMMA playerType COMMA playerName 
            {
              Object RESULT =null;
		int planetsleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).left;
		int planetsright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).right;
		String planets = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		mapConfigFileDriver.createPlayer(name, planets, type);
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("playerRulesSelector",2, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // playerRulesSelector ::= playerName COMMA playerPlanets COMMA playerType 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).value;
		int planetsleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).left;
		int planetsright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).right;
		String planets = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		mapConfigFileDriver.createPlayer(name, planets, type);
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("playerRulesSelector",2, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // playerRulesSelector ::= playerName COMMA playerType COMMA playerPlanets 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).value;
		int planetsleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int planetsright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		String planets = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		mapConfigFileDriver.createPlayer(name, planets, type);
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("playerRulesSelector",2, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // playerRulesSelector ::= playerType COMMA playerName COMMA playerPlanets 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).value;
		int planetsleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int planetsright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		String planets = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		mapConfigFileDriver.createPlayer(name, planets, type);
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("playerRulesSelector",2, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // playerRulesSelector ::= playerType COMMA playerPlanets COMMA playerName 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)).value;
		int planetsleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).left;
		int planetsright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).right;
		String planets = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		mapConfigFileDriver.createPlayer(name, planets, type);
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("playerRulesSelector",2, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // playerRulesSelector ::= error SQUAREBRACKETC COMMA map 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-3)).value;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("playerRulesSelector",2, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-3)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // playerRulesSelector ::= error SQUAREBRACKETC COMMA planets 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-3)).value;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("playerRulesSelector",2, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-3)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // playerRulesSelector ::= error SQUAREBRACKETC COMMA neutralPlanets 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-3)).value;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("playerRulesSelector",2, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-3)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // playerRulesSelector ::= error SQUAREBRACKETC COMMA playersDescription 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-3)).value;
		syntax_error((Symbol)e);
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("playerRulesSelector",2, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-3)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // playerRulesSelector ::= error CURLYBRACKETC COMMA playersDescription 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-3)).value;
		syntax_error((Symbol)e);
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("playerRulesSelector",2, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-3)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // playerName ::= NAME COLON name 
            {
              String RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		RESULT = name;
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("playerName",31, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // name ::= NAMEPLANET 
            {
              String RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		RESULT = name.replace("\"", "");
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("name",36, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // name ::= NAMEPLAYER 
            {
              String RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		RESULT = name.replace("\"", "");
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("name",36, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // NT$0 ::= 
            {
              String RESULT =null;
		int planetsleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int planetsright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		String planets = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
RESULT = planets;
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("NT$0",40, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // playerPlanets ::= PLAYERPLANETS COLON SQUAREBRACKETO planetsName NT$0 SQUAREBRACKETC 
            {
              String RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-1)).value;
		int planetsleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).left;
		int planetsright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).right;
		String planets = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).value;

              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("playerPlanets",33, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-5)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // planetsName ::= NAMEPLANET COMMA planetsName 
            {
              String RESULT =null;
		int planetleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).left;
		int planetright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).right;
		String planet = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)).value;
		int planetsleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int planetsright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		String planets = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		RESULT = planet.replace("\"", "") +"|"+planets;
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("planetsName",34, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // planetsName ::= NAMEPLANET 
            {
              String RESULT =null;
		int planetleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int planetright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		String planet = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		RESULT = planet.replace("\"", "");
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("planetsName",34, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // playerType ::= TYPE COLON type 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		RESULT = type;
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("playerType",32, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.elementAt(CUP$MapConfigFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // type ::= HUMAN 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		RESULT = type;
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("type",35, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // type ::= EASY 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		RESULT = type;
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("type",35, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // type ::= HARD 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$MapConfigFileParser$stack.peek()).value;
		RESULT = type;
              CUP$MapConfigFileParser$result = parser.getSymbolFactory().newSymbol("type",35, ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MapConfigFileParser$stack.peek()), RESULT);
            }
          return CUP$MapConfigFileParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$MapConfigFileParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$MapConfigFileParser$do_action(
    int                        CUP$MapConfigFileParser$act_num,
    java_cup.runtime.lr_parser CUP$MapConfigFileParser$parser,
    java.util.Stack            CUP$MapConfigFileParser$stack,
    int                        CUP$MapConfigFileParser$top)
    throws java.lang.Exception
    {
              return CUP$MapConfigFileParser$do_action_part00000000(
                               CUP$MapConfigFileParser$act_num,
                               CUP$MapConfigFileParser$parser,
                               CUP$MapConfigFileParser$stack,
                               CUP$MapConfigFileParser$top);
    }
}

}
